var _fs = require('fs');
var _path = require('path');
var _gu = require('gulp-util');
var _util = require('./util');
var Result = (function () {
    function Result() {
        this.emitSkipped = false;
        this.diagnostics = [];
        this.scripts = [];
        this.sourceMaps = [];
        this.declarations = [];
    }
    Result.prototype.reportDiagnostics = function () {
        var messages = [];
        if (this.emitSkipped) {
            messages.push('TypeScript compiler: ' + _gu.colors.red('emit skipped'));
        }
        else if (this.diagnostics.length) {
            messages.push('TypeScript compiler: ' + _gu.colors.red('emit completed with errors'));
        }
        for (var _i = 0, _a = this.diagnostics; _i < _a.length; _i++) {
            var d = _a[_i];
            messages.push(format(d));
        }
        if (messages.length) {
            _gu.log(messages.join('\n'));
        }
        function format(d) {
            var category = (_a = {},
                _a[DiagnosticCategory.Warning] = 'warning',
                _a[DiagnosticCategory.Error] = 'error',
                _a[DiagnosticCategory.Message] = 'message',
                _a
            );
            var output = '';
            if (d.fileName) {
                output += _path.relative(process.cwd(), d.fileName) + "(" + (d.line + 1) + "," + (d.character + 1) + "): ";
            }
            output += category[d.category] + " TS" + d.code + ": " + d.message;
            var level = 1;
            var next = d.next;
            while (next) {
                output += '\n';
                for (var i = 0; i < level; i++) {
                    output += '  ';
                }
                output += next.message;
                level++;
                next = next.next;
            }
            return output;
            var _a;
        }
    };
    Result.prototype._create = function (base, path, data) {
        var file = new _gu.File({
            base: base,
            path: path,
            contents: new Buffer(data)
        });
        var _a = findExt(path), basename = _a.basename, ext = _a.ext;
        switch (ext) {
            case '.js':
            case '.jsx':
                this.scripts.push(file);
                break;
            case '.js.map':
            case '.jsx.map':
                this.sourceMaps.push(file);
                break;
            case '.d.ts':
                this.declarations.push(file);
                break;
            default:
                throw new Error("Unknown extension of file '" + path + "'");
        }
        function findExt(path) {
            var suffixes = ['.js', '.jsx', '.js.map', '.jsx.map', '.d.ts'];
            for (var _i = 0; _i < suffixes.length; _i++) {
                var suffix = suffixes[_i];
                if (path.toLowerCase().endsWith(suffix)) {
                    return {
                        basename: path.substring(0, path.length - suffix.length),
                        ext: suffix
                    };
                }
            }
            return {
                basename: path,
                ext: null
            };
        }
    };
    Result.prototype.emit = function () {
        return new _util.PassThroughStream([].concat(this.scripts, this.sourceMaps, this.declarations));
    };
    Result.prototype.emitScripts = function () {
        return new _util.PassThroughStream(this.scripts);
    };
    Result.prototype.emitSourceMaps = function () {
        return new _util.PassThroughStream(this.sourceMaps);
    };
    Result.prototype.emitDeclarations = function () {
        return new _util.PassThroughStream(this.declarations);
    };
    Result.prototype.writeFiles = function () {
        var files = [].concat(this.scripts, this.sourceMaps, this.declarations);
        for (var _i = 0; _i < files.length; _i++) {
            var file = files[_i];
            mkdirpSync(_path.dirname(file.path));
            _fs.writeFileSync(file.path, file.contents, { encoding: 'UTF-8' });
        }
        function mkdirpSync(path) {
            try {
                var stats = _fs.lstatSync(path);
            }
            catch (ex) { }
            if (!stats || !stats.isDirectory()) {
                mkdirpSync(_path.dirname(path));
                _fs.mkdirSync(path);
            }
        }
    };
    return Result;
})();
exports.Result = Result;
(function (DiagnosticCategory) {
    DiagnosticCategory[DiagnosticCategory["Warning"] = 0] = "Warning";
    DiagnosticCategory[DiagnosticCategory["Error"] = 1] = "Error";
    DiagnosticCategory[DiagnosticCategory["Message"] = 2] = "Message";
})(exports.DiagnosticCategory || (exports.DiagnosticCategory = {}));
var DiagnosticCategory = exports.DiagnosticCategory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21waWxlci50cyJdLCJuYW1lcyI6WyJSZXN1bHQiLCJSZXN1bHQuY29uc3RydWN0b3IiLCJSZXN1bHQucmVwb3J0RGlhZ25vc3RpY3MiLCJSZXN1bHQucmVwb3J0RGlhZ25vc3RpY3MuZm9ybWF0IiwiUmVzdWx0Ll9jcmVhdGUiLCJSZXN1bHQuX2NyZWF0ZS5maW5kRXh0IiwiUmVzdWx0LmVtaXQiLCJSZXN1bHQuZW1pdFNjcmlwdHMiLCJSZXN1bHQuZW1pdFNvdXJjZU1hcHMiLCJSZXN1bHQuZW1pdERlY2xhcmF0aW9ucyIsIlJlc3VsdC53cml0ZUZpbGVzIiwiUmVzdWx0LndyaXRlRmlsZXMubWtkaXJwU3luYyIsIkRpYWdub3N0aWNDYXRlZ29yeSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxHQUFHLFdBQVcsSUFBSSxDQUFDLENBQUM7QUFDM0IsSUFBTyxLQUFLLFdBQVcsTUFBTSxDQUFDLENBQUM7QUFDL0IsSUFBTyxHQUFHLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFDbEMsSUFBTyxLQUFLLFdBQVcsUUFBUSxDQUFDLENBQUM7QUFlakM7SUFBQUE7UUFDSUMsZ0JBQVdBLEdBQVlBLEtBQUtBLENBQUNBO1FBQzdCQSxnQkFBV0EsR0FBaUJBLEVBQUVBLENBQUNBO1FBQy9CQSxZQUFPQSxHQUFlQSxFQUFFQSxDQUFDQTtRQUN6QkEsZUFBVUEsR0FBZUEsRUFBRUEsQ0FBQ0E7UUFDNUJBLGlCQUFZQSxHQUFlQSxFQUFFQSxDQUFDQTtJQTBIbENBLENBQUNBO0lBeEhHRCxrQ0FBaUJBLEdBQWpCQTtRQUNJRSxJQUFJQSxRQUFRQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUVsQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkJBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLHVCQUF1QkEsR0FBR0EsR0FBR0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDNUVBLENBQUNBO1FBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1lBQy9CQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSx1QkFBdUJBLEdBQUdBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLDRCQUE0QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDMUZBLENBQUNBO1FBRURBLEdBQUdBLENBQUNBLENBQVVBLFVBQWdCQSxFQUFoQkEsS0FBQUEsSUFBSUEsQ0FBQ0EsV0FBV0EsRUFBekJBLGNBQUtBLEVBQUxBLElBQXlCQSxDQUFDQTtZQUExQkEsSUFBSUEsQ0FBQ0EsU0FBQUE7WUFDTkEsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7U0FDNUJBO1FBRURBLEVBQUVBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1lBQ2xCQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNqQ0EsQ0FBQ0E7UUFFREEsZ0JBQWdCQSxDQUFhQTtZQUN6QkMsSUFBSUEsUUFBUUEsR0FBR0E7Z0JBQ1hBLEdBQUNBLGtCQUFrQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBRUEsU0FBU0E7Z0JBQ3ZDQSxHQUFDQSxrQkFBa0JBLENBQUNBLEtBQUtBLENBQUNBLEdBQUVBLE9BQU9BO2dCQUNuQ0EsR0FBQ0Esa0JBQWtCQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFFQSxTQUFTQTs7YUFDMUNBLENBQUNBO1lBQ0ZBLElBQUlBLE1BQU1BLEdBQUdBLEVBQUVBLENBQUNBO1lBQ2hCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDYkEsTUFBTUEsSUFBT0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsVUFBSUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsR0FBR0EsQ0FBQ0EsV0FBSUEsQ0FBQ0EsQ0FBQ0EsU0FBU0EsR0FBR0EsQ0FBQ0EsU0FBS0EsQ0FBQ0E7WUFDakdBLENBQUNBO1lBQ0RBLE1BQU1BLElBQU9BLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLFdBQU1BLENBQUNBLENBQUNBLElBQUlBLFVBQUtBLENBQUNBLENBQUNBLE9BQVNBLENBQUNBO1lBQzlEQSxJQUFJQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNkQSxJQUFJQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUNsQkEsT0FBT0EsSUFBSUEsRUFBRUEsQ0FBQ0E7Z0JBQ1ZBLE1BQU1BLElBQUlBLElBQUlBLENBQUNBO2dCQUNmQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxLQUFLQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtvQkFDN0JBLE1BQU1BLElBQUlBLElBQUlBLENBQUNBO2dCQUNuQkEsQ0FBQ0E7Z0JBQ0RBLE1BQU1BLElBQUlBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBO2dCQUN2QkEsS0FBS0EsRUFBRUEsQ0FBQ0E7Z0JBQ1JBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBO1lBQ3JCQSxDQUFDQTtZQUNEQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTs7UUFDbEJBLENBQUNBO0lBQ0xELENBQUNBO0lBRURGLHdCQUFPQSxHQUFQQSxVQUFRQSxJQUFZQSxFQUFFQSxJQUFZQSxFQUFFQSxJQUFZQTtRQUM1Q0ksSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDcEJBLElBQUlBLEVBQUVBLElBQUlBO1lBQ1ZBLElBQUlBLEVBQUVBLElBQUlBO1lBQ1ZBLFFBQVFBLEVBQUVBLElBQUlBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1NBQzdCQSxDQUFDQSxDQUFDQTtRQUNIQSxJQUFJQSxLQUFvQkEsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBL0JBLFFBQVFBLGdCQUFFQSxHQUFHQSxTQUFrQkEsQ0FBQ0E7UUFDdENBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQ1ZBLEtBQUtBLEtBQUtBLENBQUNBO1lBQ1hBLEtBQUtBLE1BQU1BO2dCQUNQQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDeEJBLEtBQUtBLENBQUNBO1lBQ1ZBLEtBQUtBLFNBQVNBLENBQUNBO1lBQ2ZBLEtBQUtBLFVBQVVBO2dCQUNYQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDM0JBLEtBQUtBLENBQUNBO1lBQ1ZBLEtBQUtBLE9BQU9BO2dCQUNSQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDN0JBLEtBQUtBLENBQUNBO1lBQ1ZBO2dCQUNJQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSxnQ0FBOEJBLElBQUlBLE1BQUdBLENBQUNBLENBQUNBO1FBQy9EQSxDQUFDQTtRQUVEQSxpQkFBaUJBLElBQVlBO1lBQ3pCQyxJQUFJQSxRQUFRQSxHQUFHQSxDQUFDQSxLQUFLQSxFQUFFQSxNQUFNQSxFQUFFQSxTQUFTQSxFQUFFQSxVQUFVQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQTtZQUMvREEsR0FBR0EsQ0FBQ0EsQ0FBZUEsVUFBUUEsRUFBdEJBLG9CQUFVQSxFQUFWQSxJQUFzQkEsQ0FBQ0E7Z0JBQXZCQSxJQUFJQSxNQUFNQSxHQUFJQSxRQUFRQSxJQUFaQTtnQkFDWEEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3RDQSxNQUFNQSxDQUFDQTt3QkFDSEEsUUFBUUEsRUFBRUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7d0JBQ3hEQSxHQUFHQSxFQUFFQSxNQUFNQTtxQkFDZEEsQ0FBQUE7Z0JBQ0xBLENBQUNBO2FBQ0pBO1lBQ0RBLE1BQU1BLENBQUNBO2dCQUNIQSxRQUFRQSxFQUFFQSxJQUFJQTtnQkFDZEEsR0FBR0EsRUFBRUEsSUFBSUE7YUFDWkEsQ0FBQUE7UUFDTEEsQ0FBQ0E7SUFDTEQsQ0FBQ0E7SUFFREoscUJBQUlBLEdBQUpBO1FBQ0lNLE1BQU1BLENBQUNBLElBQUlBLEtBQUtBLENBQUNBLGlCQUFpQkEsQ0FDOUJBLEVBQUVBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLEVBQUVBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQzlEQSxDQUFDQTtJQUNOQSxDQUFDQTtJQUVETiw0QkFBV0EsR0FBWEE7UUFDSU8sTUFBTUEsQ0FBQ0EsSUFBSUEsS0FBS0EsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtJQUNyREEsQ0FBQ0E7SUFFRFAsK0JBQWNBLEdBQWRBO1FBQ0lRLE1BQU1BLENBQUNBLElBQUlBLEtBQUtBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7SUFDeERBLENBQUNBO0lBRURSLGlDQUFnQkEsR0FBaEJBO1FBQ0lTLE1BQU1BLENBQUNBLElBQUlBLEtBQUtBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0E7SUFDMURBLENBQUNBO0lBRURULDJCQUFVQSxHQUFWQTtRQUNJVSxJQUFJQSxLQUFLQSxHQUFHQSxFQUFFQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxFQUFFQSxJQUFJQSxDQUFDQSxVQUFVQSxFQUFFQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtRQUN4RUEsR0FBR0EsQ0FBQ0EsQ0FBYUEsVUFBS0EsRUFBakJBLGlCQUFRQSxFQUFSQSxJQUFpQkEsQ0FBQ0E7WUFBbEJBLElBQUlBLElBQUlBLEdBQUlBLEtBQUtBLElBQVRBO1lBQ1RBLFVBQVVBLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1lBQ3JDQSxHQUFHQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxFQUFFQSxRQUFRQSxFQUFFQSxPQUFPQSxFQUFFQSxDQUFDQSxDQUFDQTtTQUN0RUE7UUFFREEsb0JBQW9CQSxJQUFZQTtZQUM1QkMsSUFBSUEsQ0FBQ0E7Z0JBQ0RBLElBQUlBLEtBQUtBLEdBQUdBLEdBQUdBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ3BDQSxDQUNBQTtZQUFBQSxLQUFLQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtZQUNiQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDakNBLFVBQVVBLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUNoQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDeEJBLENBQUNBO1FBQ0xBLENBQUNBO0lBQ0xELENBQUNBO0lBQ0xWLGFBQUNBO0FBQURBLENBQUNBLEFBL0hELElBK0hDO0FBL0hZLGNBQU0sU0ErSGxCLENBQUE7QUFFRCxXQUFZLGtCQUFrQjtJQUMxQlksaUVBQVdBLENBQUFBO0lBQ1hBLDZEQUFTQSxDQUFBQTtJQUNUQSxpRUFBV0EsQ0FBQUE7QUFDZkEsQ0FBQ0EsRUFKVywwQkFBa0IsS0FBbEIsMEJBQWtCLFFBSTdCO0FBSkQsSUFBWSxrQkFBa0IsR0FBbEIsMEJBSVgsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfZnMgPSByZXF1aXJlKCdmcycpO1xuaW1wb3J0IF9wYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IF9ndSA9IHJlcXVpcmUoJ2d1bHAtdXRpbCcpO1xuaW1wb3J0IF91dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5pbXBvcnQgX2xhbmcgPSByZXF1aXJlKCcuL2xhbmcnKTtcblxuZXhwb3J0IGludGVyZmFjZSBPcHRpb24ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmcgfCBfbGFuZy5NYXA8bnVtYmVyPjtcbiAgICBpc0ZpbGVQYXRoPzogYm9vbGVhbjtcbiAgICBleHBlcmltZW50YWw/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVyIHtcbiAgICBvcHRpb25zKCk6IE9wdGlvbltdO1xuICAgIGNvbXBpbGUob3B0aW9uczogYW55LCBmaWxlTmFtZXM6IHN0cmluZ1tdLCByZXN1bHQ6IFJlc3VsdCk7XG59XG5cbmV4cG9ydCBjbGFzcyBSZXN1bHQge1xuICAgIGVtaXRTa2lwcGVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgZGlhZ25vc3RpY3M6IERpYWdub3N0aWNbXSA9IFtdO1xuICAgIHNjcmlwdHM6IF9ndS5GaWxlW10gPSBbXTtcbiAgICBzb3VyY2VNYXBzOiBfZ3UuRmlsZVtdID0gW107XG4gICAgZGVjbGFyYXRpb25zOiBfZ3UuRmlsZVtdID0gW107XG5cbiAgICByZXBvcnREaWFnbm9zdGljcygpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2VzID0gW107XG5cbiAgICAgICAgaWYgKHRoaXMuZW1pdFNraXBwZWQpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goJ1R5cGVTY3JpcHQgY29tcGlsZXI6ICcgKyBfZ3UuY29sb3JzLnJlZCgnZW1pdCBza2lwcGVkJykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGlhZ25vc3RpY3MubGVuZ3RoKSB7XG4gICAgICAgICAgICBtZXNzYWdlcy5wdXNoKCdUeXBlU2NyaXB0IGNvbXBpbGVyOiAnICsgX2d1LmNvbG9ycy5yZWQoJ2VtaXQgY29tcGxldGVkIHdpdGggZXJyb3JzJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgZCBvZiB0aGlzLmRpYWdub3N0aWNzKSB7XG4gICAgICAgICAgICBtZXNzYWdlcy5wdXNoKGZvcm1hdChkKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBfZ3UubG9nKG1lc3NhZ2VzLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZvcm1hdChkOiBEaWFnbm9zdGljKTogc3RyaW5nIHtcbiAgICAgICAgICAgIGxldCBjYXRlZ29yeSA9IHtcbiAgICAgICAgICAgICAgICBbRGlhZ25vc3RpY0NhdGVnb3J5Lldhcm5pbmddOiAnd2FybmluZycsXG4gICAgICAgICAgICAgICAgW0RpYWdub3N0aWNDYXRlZ29yeS5FcnJvcl06ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgW0RpYWdub3N0aWNDYXRlZ29yeS5NZXNzYWdlXTogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxldCBvdXRwdXQgPSAnJztcbiAgICAgICAgICAgIGlmIChkLmZpbGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IGAke19wYXRoLnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksIGQuZmlsZU5hbWUpfSgke2QubGluZSArIDF9LCR7ZC5jaGFyYWN0ZXIgKyAxfSk6IGA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRwdXQgKz0gYCR7Y2F0ZWdvcnlbZC5jYXRlZ29yeV19IFRTJHtkLmNvZGV9OiAke2QubWVzc2FnZX1gO1xuICAgICAgICAgICAgbGV0IGxldmVsID0gMTtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gZC5uZXh0O1xuICAgICAgICAgICAgd2hpbGUgKG5leHQpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZXZlbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSAnICAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gbmV4dC5tZXNzYWdlO1xuICAgICAgICAgICAgICAgIGxldmVsKys7XG4gICAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfY3JlYXRlKGJhc2U6IHN0cmluZywgcGF0aDogc3RyaW5nLCBkYXRhOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgbGV0IGZpbGUgPSBuZXcgX2d1LkZpbGUoe1xuICAgICAgICAgICAgYmFzZTogYmFzZSxcbiAgICAgICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgICAgICBjb250ZW50czogbmV3IEJ1ZmZlcihkYXRhKVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHsgYmFzZW5hbWUsIGV4dCB9ID0gZmluZEV4dChwYXRoKTtcbiAgICAgICAgc3dpdGNoIChleHQpIHtcbiAgICAgICAgICAgIGNhc2UgJy5qcyc6XG4gICAgICAgICAgICBjYXNlICcuanN4JzpcbiAgICAgICAgICAgICAgICB0aGlzLnNjcmlwdHMucHVzaChmaWxlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJy5qcy5tYXAnOlxuICAgICAgICAgICAgY2FzZSAnLmpzeC5tYXAnOlxuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlTWFwcy5wdXNoKGZpbGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnLmQudHMnOlxuICAgICAgICAgICAgICAgIHRoaXMuZGVjbGFyYXRpb25zLnB1c2goZmlsZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBleHRlbnNpb24gb2YgZmlsZSAnJHtwYXRofSdgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZpbmRFeHQocGF0aDogc3RyaW5nKTogeyBiYXNlbmFtZTogc3RyaW5nOyBleHQ6IHN0cmluZzsgfSB7XG4gICAgICAgICAgICBsZXQgc3VmZml4ZXMgPSBbJy5qcycsICcuanN4JywgJy5qcy5tYXAnLCAnLmpzeC5tYXAnLCAnLmQudHMnXTtcbiAgICAgICAgICAgIGZvciAobGV0IHN1ZmZpeCBvZiBzdWZmaXhlcykge1xuICAgICAgICAgICAgICAgIGlmIChwYXRoLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoc3VmZml4KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZW5hbWU6IHBhdGguc3Vic3RyaW5nKDAsIHBhdGgubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgICAgICBleHQ6IHN1ZmZpeFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBiYXNlbmFtZTogcGF0aCxcbiAgICAgICAgICAgICAgICBleHQ6IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVtaXQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgX3V0aWwuUGFzc1Rocm91Z2hTdHJlYW0oXG4gICAgICAgICAgICBbXS5jb25jYXQodGhpcy5zY3JpcHRzLCB0aGlzLnNvdXJjZU1hcHMsIHRoaXMuZGVjbGFyYXRpb25zKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGVtaXRTY3JpcHRzKCkge1xuICAgICAgICByZXR1cm4gbmV3IF91dGlsLlBhc3NUaHJvdWdoU3RyZWFtKHRoaXMuc2NyaXB0cyk7XG4gICAgfVxuXG4gICAgZW1pdFNvdXJjZU1hcHMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgX3V0aWwuUGFzc1Rocm91Z2hTdHJlYW0odGhpcy5zb3VyY2VNYXBzKTtcbiAgICB9XG5cbiAgICBlbWl0RGVjbGFyYXRpb25zKCkge1xuICAgICAgICByZXR1cm4gbmV3IF91dGlsLlBhc3NUaHJvdWdoU3RyZWFtKHRoaXMuZGVjbGFyYXRpb25zKTtcbiAgICB9XG5cbiAgICB3cml0ZUZpbGVzKCkge1xuICAgICAgICBsZXQgZmlsZXMgPSBbXS5jb25jYXQodGhpcy5zY3JpcHRzLCB0aGlzLnNvdXJjZU1hcHMsIHRoaXMuZGVjbGFyYXRpb25zKTtcbiAgICAgICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICAgICAgbWtkaXJwU3luYyhfcGF0aC5kaXJuYW1lKGZpbGUucGF0aCkpO1xuICAgICAgICAgICAgX2ZzLndyaXRlRmlsZVN5bmMoZmlsZS5wYXRoLCBmaWxlLmNvbnRlbnRzLCB7IGVuY29kaW5nOiAnVVRGLTgnIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbWtkaXJwU3luYyhwYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRzID0gX2ZzLmxzdGF0U3luYyhwYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChleCkge31cbiAgICAgICAgICAgIGlmICghc3RhdHMgfHwgIXN0YXRzLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgICAgICBta2RpcnBTeW5jKF9wYXRoLmRpcm5hbWUocGF0aCkpO1xuICAgICAgICAgICAgICAgIF9mcy5ta2RpclN5bmMocGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBlbnVtIERpYWdub3N0aWNDYXRlZ29yeSB7XG4gICAgV2FybmluZyA9IDAsXG4gICAgRXJyb3IgPSAxLFxuICAgIE1lc3NhZ2UgPSAyLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERpYWdub3N0aWMgZXh0ZW5kcyBEaWFnbm9zdGljQ2hhaW4ge1xuICAgIGZpbGVOYW1lOiBzdHJpbmc7XG4gICAgc3RhcnQ6IG51bWJlcjtcbiAgICBsZW5ndGg6IG51bWJlcjtcbiAgICBsaW5lOiBudW1iZXI7XG4gICAgY2hhcmFjdGVyOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlhZ25vc3RpY0NoYWluIHtcbiAgICBjYXRlZ29yeTogRGlhZ25vc3RpY0NhdGVnb3J5O1xuICAgIGNvZGU6IG51bWJlcjtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgbmV4dD86IERpYWdub3N0aWNDaGFpbjtcbn1cbiJdfQ==