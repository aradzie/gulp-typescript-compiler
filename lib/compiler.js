var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _fs = require('fs');
var _path = require('path');
var _gu = require('gulp-util');
var _util = require('./util');
var Result = (function () {
    function Result() {
        this.emitSkipped = false;
        this.diagnostics = [];
        this.scripts = [];
        this.sourceMaps = [];
        this.declarations = [];
    }
    Result.prototype.reportDiagnostics = function () {
        var messages = [];
        if (this.emitSkipped) {
            messages.push('TypeScript compiler: ' + _gu.colors.red('emit skipped'));
        }
        else if (this.diagnostics.length) {
            messages.push('TypeScript compiler: ' + _gu.colors.red('emit completed with errors'));
        }
        for (var _i = 0, _a = this.diagnostics; _i < _a.length; _i++) {
            var d = _a[_i];
            messages.push(Diagnostic.format(d));
        }
        if (messages.length) {
            _gu.log(messages.join('\n'));
        }
    };
    Result.prototype._create = function (base, path, data) {
        var file = new _gu.File({
            base: base,
            path: path,
            contents: new Buffer(data)
        });
        var _a = findExt(path), basename = _a.basename, ext = _a.ext;
        switch (ext) {
            case '.js':
            case '.jsx':
                this.scripts.push(file);
                break;
            case '.js.map':
            case '.jsx.map':
                this.sourceMaps.push(file);
                break;
            case '.d.ts':
                this.declarations.push(file);
                break;
            default:
                throw new Error("Unknown extension of file '" + path + "'");
        }
        function findExt(path) {
            var suffixes = ['.js', '.jsx', '.js.map', '.jsx.map', '.d.ts'];
            for (var _i = 0; _i < suffixes.length; _i++) {
                var suffix = suffixes[_i];
                if (path.toLowerCase().endsWith(suffix)) {
                    return {
                        basename: path.substring(0, path.length - suffix.length),
                        ext: suffix
                    };
                }
            }
            return {
                basename: path,
                ext: null
            };
        }
    };
    Result.prototype.emit = function () {
        return new _util.PassThroughStream([].concat(this.scripts, this.sourceMaps, this.declarations));
    };
    Result.prototype.emitScripts = function () {
        return new _util.PassThroughStream(this.scripts);
    };
    Result.prototype.emitSourceMaps = function () {
        return new _util.PassThroughStream(this.sourceMaps);
    };
    Result.prototype.emitDeclarations = function () {
        return new _util.PassThroughStream(this.declarations);
    };
    Result.prototype.writeFiles = function () {
        var files = [].concat(this.scripts, this.sourceMaps, this.declarations);
        for (var _i = 0; _i < files.length; _i++) {
            var file = files[_i];
            mkdirpSync(_path.dirname(file.path));
            _fs.writeFileSync(file.path, file.contents, { encoding: 'UTF-8' });
        }
        function mkdirpSync(path) {
            try {
                var stats = _fs.lstatSync(path);
            }
            catch (ex) { }
            if (!stats || !stats.isDirectory()) {
                mkdirpSync(_path.dirname(path));
                _fs.mkdirSync(path);
            }
        }
    };
    return Result;
})();
exports.Result = Result;
(function (DiagnosticCategory) {
    DiagnosticCategory[DiagnosticCategory["Warning"] = 0] = "Warning";
    DiagnosticCategory[DiagnosticCategory["Error"] = 1] = "Error";
    DiagnosticCategory[DiagnosticCategory["Message"] = 2] = "Message";
})(exports.DiagnosticCategory || (exports.DiagnosticCategory = {}));
var DiagnosticCategory = exports.DiagnosticCategory;
var DiagnosticChain = (function () {
    function DiagnosticChain(category, code, message, next) {
        if (next === void 0) { next = null; }
        this.category = category;
        this.code = code;
        this.message = message;
        this.next = next;
    }
    DiagnosticChain.prototype.toString = function () {
        return this.message;
    };
    return DiagnosticChain;
})();
exports.DiagnosticChain = DiagnosticChain;
var Diagnostic = (function (_super) {
    __extends(Diagnostic, _super);
    function Diagnostic(category, code, message, next) {
        if (next === void 0) { next = null; }
        _super.call(this, category, code, message, next);
        this.fileName = null;
        this.start = null;
        this.length = null;
        this.line = null;
        this.character = null;
    }
    Diagnostic.prototype.toString = function () {
        return Diagnostic.format(this);
    };
    Diagnostic.format = function (d) {
        var cn = (_a = {},
            _a[DiagnosticCategory.Warning] = 'warning',
            _a[DiagnosticCategory.Error] = 'error',
            _a[DiagnosticCategory.Message] = 'message',
            _a
        );
        var output = '';
        if (d.fileName) {
            output += _path.relative(process.cwd(), d.fileName) + "(" + (d.line + 1) + "," + (d.character + 1) + "): ";
        }
        output += cn[d.category] + " TS" + d.code + ": " + d.message;
        var level = 1;
        var next = d.next;
        while (next) {
            output += '\n';
            for (var i = 0; i < level; i++) {
                output += '  ';
            }
            output += next.message;
            level++;
            next = next.next;
        }
        return output;
        var _a;
    };
    return Diagnostic;
})(DiagnosticChain);
exports.Diagnostic = Diagnostic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21waWxlci50cyJdLCJuYW1lcyI6WyJSZXN1bHQiLCJSZXN1bHQuY29uc3RydWN0b3IiLCJSZXN1bHQucmVwb3J0RGlhZ25vc3RpY3MiLCJSZXN1bHQuX2NyZWF0ZSIsIlJlc3VsdC5fY3JlYXRlLmZpbmRFeHQiLCJSZXN1bHQuZW1pdCIsIlJlc3VsdC5lbWl0U2NyaXB0cyIsIlJlc3VsdC5lbWl0U291cmNlTWFwcyIsIlJlc3VsdC5lbWl0RGVjbGFyYXRpb25zIiwiUmVzdWx0LndyaXRlRmlsZXMiLCJSZXN1bHQud3JpdGVGaWxlcy5ta2RpcnBTeW5jIiwiRGlhZ25vc3RpY0NhdGVnb3J5IiwiRGlhZ25vc3RpY0NoYWluIiwiRGlhZ25vc3RpY0NoYWluLmNvbnN0cnVjdG9yIiwiRGlhZ25vc3RpY0NoYWluLnRvU3RyaW5nIiwiRGlhZ25vc3RpYyIsIkRpYWdub3N0aWMuY29uc3RydWN0b3IiLCJEaWFnbm9zdGljLnRvU3RyaW5nIiwiRGlhZ25vc3RpYy5mb3JtYXQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBTyxHQUFHLFdBQVcsSUFBSSxDQUFDLENBQUM7QUFDM0IsSUFBTyxLQUFLLFdBQVcsTUFBTSxDQUFDLENBQUM7QUFDL0IsSUFBTyxHQUFHLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFDbEMsSUFBTyxLQUFLLFdBQVcsUUFBUSxDQUFDLENBQUM7QUFPakM7SUFBQUE7UUFDSUMsZ0JBQVdBLEdBQVlBLEtBQUtBLENBQUNBO1FBQzdCQSxnQkFBV0EsR0FBaUJBLEVBQUVBLENBQUNBO1FBQy9CQSxZQUFPQSxHQUFlQSxFQUFFQSxDQUFDQTtRQUN6QkEsZUFBVUEsR0FBZUEsRUFBRUEsQ0FBQ0E7UUFDNUJBLGlCQUFZQSxHQUFlQSxFQUFFQSxDQUFDQTtJQWlHbENBLENBQUNBO0lBL0ZHRCxrQ0FBaUJBLEdBQWpCQTtRQUNJRSxJQUFJQSxRQUFRQSxHQUFHQSxFQUFFQSxDQUFDQTtR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QUNBLEVBQUVBLEVBQUVBLENBQUNBO2dCQUM3QkEsTUFBTUEsSUFBSUEsSUFBSUEsQ0FBQ0E7WUFDbkJBLENBQUNBO1lBQ0RBLE1BQU1BLElBQUlBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBO1lBQ3ZCQSxLQUFLQSxFQUFFQSxDQUFDQTtZQUNSQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNyQkEsQ0FBQ0E7UUFDREEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7O0lBQ2xCQSxDQUFDQTtJQUNMSCxpQkFBQ0E7QUFBREEsQ0FBQ0EsQUExQ0QsRUFBZ0MsZUFBZSxFQTBDOUM7QUExQ1ksa0JBQVUsYUEwQ3RCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2ZzID0gcmVxdWlyZSgnZnMnKTtcbmltcG9ydCBfcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCBfZ3UgPSByZXF1aXJlKCdndWxwLXV0aWwnKTtcbmltcG9ydCBfdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuaW1wb3J0IF9sYW5nID0gcmVxdWlyZSgnLi9sYW5nJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZXIge1xuICAgIGNvbXBpbGUob3B0aW9uczogYW55LCBmaWxlTmFtZXM6IHN0cmluZ1tdLCByZXN1bHQ6IFJlc3VsdCk7XG59XG5cbmV4cG9ydCBjbGFzcyBSZXN1bHQge1xuICAgIGVtaXRTa2lwcGVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgZGlhZ25vc3RpY3M6IERpYWdub3N0aWNbXSA9IFtdO1xuICAgIHNjcmlwdHM6IF9ndS5GaWxlW10gPSBbXTtcbiAgICBzb3VyY2VNYXBzOiBfZ3UuRmlsZVtdID0gW107XG4gICAgZGVjbGFyYXRpb25zOiBfZ3UuRmlsZVtdID0gW107XG5cbiAgICByZXBvcnREaWFnbm9zdGljcygpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2VzID0gW107XG5cbiAgICAgICAgaWYgKHRoaXMuZW1pdFNraXBwZWQpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goJ1R5cGVTY3JpcHQgY29tcGlsZXI6ICcgKyBfZ3UuY29sb3JzLnJlZCgnZW1pdCBza2lwcGVkJykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGlhZ25vc3RpY3MubGVuZ3RoKSB7XG4gICAgICAgICAgICBtZXNzYWdlcy5wdXNoKCdUeXBlU2NyaXB0IGNvbXBpbGVyOiAnICsgX2d1LmNvbG9ycy5yZWQoJ2VtaXQgY29tcGxldGVkIHdpdGggZXJyb3JzJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgZCBvZiB0aGlzLmRpYWdub3N0aWNzKSB7XG4gICAgICAgICAgICBtZXNzYWdlcy5wdXNoKERpYWdub3N0aWMuZm9ybWF0KGQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXNzYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIF9ndS5sb2cobWVzc2FnZXMuam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NyZWF0ZShiYXNlOiBzdHJpbmcsIHBhdGg6IHN0cmluZywgZGF0YTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGxldCBmaWxlID0gbmV3IF9ndS5GaWxlKHtcbiAgICAgICAgICAgIGJhc2U6IGJhc2UsXG4gICAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgICAgY29udGVudHM6IG5ldyBCdWZmZXIoZGF0YSlcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB7IGJhc2VuYW1lLCBleHQgfSA9IGZpbmRFeHQocGF0aCk7XG4gICAgICAgIHN3aXRjaCAoZXh0KSB7XG4gICAgICAgICAgICBjYXNlICcuanMnOlxuICAgICAgICAgICAgY2FzZSAnLmpzeCc6XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JpcHRzLnB1c2goZmlsZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICcuanMubWFwJzpcbiAgICAgICAgICAgIGNhc2UgJy5qc3gubWFwJzpcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZU1hcHMucHVzaChmaWxlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJy5kLnRzJzpcbiAgICAgICAgICAgICAgICB0aGlzLmRlY2xhcmF0aW9ucy5wdXNoKGZpbGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gZXh0ZW5zaW9uIG9mIGZpbGUgJyR7cGF0aH0nYCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmaW5kRXh0KHBhdGg6IHN0cmluZyk6IHsgYmFzZW5hbWU6IHN0cmluZzsgZXh0OiBzdHJpbmc7IH0ge1xuICAgICAgICAgICAgbGV0IHN1ZmZpeGVzID0gWycuanMnLCAnLmpzeCcsICcuanMubWFwJywgJy5qc3gubWFwJywgJy5kLnRzJ107XG4gICAgICAgICAgICBmb3IgKGxldCBzdWZmaXggb2Ygc3VmZml4ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAocGF0aC50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKHN1ZmZpeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VuYW1lOiBwYXRoLnN1YnN0cmluZygwLCBwYXRoLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0OiBzdWZmaXhcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYmFzZW5hbWU6IHBhdGgsXG4gICAgICAgICAgICAgICAgZXh0OiBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbWl0KCkge1xuICAgICAgICByZXR1cm4gbmV3IF91dGlsLlBhc3NUaHJvdWdoU3RyZWFtKFxuICAgICAgICAgICAgW10uY29uY2F0KHRoaXMuc2NyaXB0cywgdGhpcy5zb3VyY2VNYXBzLCB0aGlzLmRlY2xhcmF0aW9ucylcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBlbWl0U2NyaXB0cygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfdXRpbC5QYXNzVGhyb3VnaFN0cmVhbSh0aGlzLnNjcmlwdHMpO1xuICAgIH1cblxuICAgIGVtaXRTb3VyY2VNYXBzKCkge1xuICAgICAgICByZXR1cm4gbmV3IF91dGlsLlBhc3NUaHJvdWdoU3RyZWFtKHRoaXMuc291cmNlTWFwcyk7XG4gICAgfVxuXG4gICAgZW1pdERlY2xhcmF0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfdXRpbC5QYXNzVGhyb3VnaFN0cmVhbSh0aGlzLmRlY2xhcmF0aW9ucyk7XG4gICAgfVxuXG4gICAgd3JpdGVGaWxlcygpIHtcbiAgICAgICAgbGV0IGZpbGVzID0gW10uY29uY2F0KHRoaXMuc2NyaXB0cywgdGhpcy5zb3VyY2VNYXBzLCB0aGlzLmRlY2xhcmF0aW9ucyk7XG4gICAgICAgIGZvciAobGV0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgICAgIG1rZGlycFN5bmMoX3BhdGguZGlybmFtZShmaWxlLnBhdGgpKTtcbiAgICAgICAgICAgIF9mcy53cml0ZUZpbGVTeW5jKGZpbGUucGF0aCwgZmlsZS5jb250ZW50cywgeyBlbmNvZGluZzogJ1VURi04JyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1rZGlycFN5bmMocGF0aDogc3RyaW5nKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBzdGF0cyA9IF9mcy5sc3RhdFN5bmMocGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXgpIHt9XG4gICAgICAgICAgICBpZiAoIXN0YXRzIHx8ICFzdGF0cy5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICAgICAgbWtkaXJwU3luYyhfcGF0aC5kaXJuYW1lKHBhdGgpKTtcbiAgICAgICAgICAgICAgICBfZnMubWtkaXJTeW5jKHBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZW51bSBEaWFnbm9zdGljQ2F0ZWdvcnkge1xuICAgIFdhcm5pbmcgPSAwLFxuICAgIEVycm9yID0gMSxcbiAgICBNZXNzYWdlID0gMixcbn1cblxuZXhwb3J0IGNsYXNzIERpYWdub3N0aWNDaGFpbiB7XG4gICAgY29uc3RydWN0b3IocHVibGljIGNhdGVnb3J5OiBEaWFnbm9zdGljQ2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgcHVibGljIGNvZGU6IG51bWJlcixcbiAgICAgICAgICAgICAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBuZXh0OiBEaWFnbm9zdGljQ2hhaW4gPSBudWxsKSB7fVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGlhZ25vc3RpYyBleHRlbmRzIERpYWdub3N0aWNDaGFpbiB7XG4gICAgZmlsZU5hbWU6IHN0cmluZyA9IG51bGw7XG4gICAgc3RhcnQ6IG51bWJlciA9IG51bGw7XG4gICAgbGVuZ3RoOiBudW1iZXIgPSBudWxsO1xuICAgIGxpbmU6IG51bWJlciA9IG51bGw7XG4gICAgY2hhcmFjdGVyOiBudW1iZXIgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoY2F0ZWdvcnk6IERpYWdub3N0aWNDYXRlZ29yeSxcbiAgICAgICAgICAgICAgICBjb2RlOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgIG5leHQ6IERpYWdub3N0aWNDaGFpbiA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIoY2F0ZWdvcnksIGNvZGUsIG1lc3NhZ2UsIG5leHQpO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gRGlhZ25vc3RpYy5mb3JtYXQodGhpcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdChkOiBEaWFnbm9zdGljKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGNuID0ge1xuICAgICAgICAgICAgW0RpYWdub3N0aWNDYXRlZ29yeS5XYXJuaW5nXTogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgW0RpYWdub3N0aWNDYXRlZ29yeS5FcnJvcl06ICdlcnJvcicsXG4gICAgICAgICAgICBbRGlhZ25vc3RpY0NhdGVnb3J5Lk1lc3NhZ2VdOiAnbWVzc2FnZScsXG4gICAgICAgIH07XG4gICAgICAgIGxldCBvdXRwdXQgPSAnJztcbiAgICAgICAgaWYgKGQuZmlsZU5hbWUpIHtcbiAgICAgICAgICAgIG91dHB1dCArPSBgJHtfcGF0aC5yZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLCBkLmZpbGVOYW1lKX0oJHtkLmxpbmUgKyAxfSwke2QuY2hhcmFjdGVyICsgMX0pOiBgO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dCArPSBgJHtjbltkLmNhdGVnb3J5XX0gVFMke2QuY29kZX06ICR7ZC5tZXNzYWdlfWA7XG4gICAgICAgIGxldCBsZXZlbCA9IDE7XG4gICAgICAgIGxldCBuZXh0ID0gZC5uZXh0O1xuICAgICAgICB3aGlsZSAobmV4dCkge1xuICAgICAgICAgICAgb3V0cHV0ICs9ICdcXG4nO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZXZlbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9ICcgICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRwdXQgKz0gbmV4dC5tZXNzYWdlO1xuICAgICAgICAgICAgbGV2ZWwrKztcbiAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG59XG4iXX0=