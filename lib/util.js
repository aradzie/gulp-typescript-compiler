var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _stream = require('stream');
var _gu = require('gulp-util');
var PluginError = (function (_super) {
    __extends(PluginError, _super);
    function PluginError(message, options) {
        _super.call(this, 'gulp-typescript-compiler', message, options);
    }
    PluginError.prototype.toString = function () {
        var header = _gu.colors.red(this.name) + " in plugin '" + _gu.colors.cyan(this.plugin) + "'";
        var body = "Message:\n" + this.message.split('\n').map(pad).join('\n');
        return header + "\n" + body;
        function pad(line) {
            return '  ' + line;
        }
    };
    return PluginError;
})(_gu.PluginError);
exports.PluginError = PluginError;
var PassThroughStream = (function (_super) {
    __extends(PassThroughStream, _super);
    function PassThroughStream(files) {
        _super.call(this, { objectMode: true });
        this._files = [];
        this._index = 0;
        if (Array.isArray(files)) {
            this._files = files.slice(0, files.length);
        }
    }
    PassThroughStream.prototype._write = function (file, encoding, cb) {
        if (!file) {
            cb();
            return;
        }
        if (file.isNull()) {
            cb();
            return;
        }
        if (file.isStream()) {
            cb(new PluginError('Streaming not supported'));
            return;
        }
        this.push(file);
        cb();
    };
    PassThroughStream.prototype._read = function () {
        if (this._index < this._files.length) {
            this.push(this._files[this._index++]);
        }
        else {
            this.push(null);
        }
    };
    return PassThroughStream;
})(_stream.Duplex);
exports.PassThroughStream = PassThroughStream;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOlsiUGx1Z2luRXJyb3IiLCJQbHVnaW5FcnJvci5jb25zdHJ1Y3RvciIsIlBsdWdpbkVycm9yLnRvU3RyaW5nIiwiUGx1Z2luRXJyb3IudG9TdHJpbmcucGFkIiwiUGFzc1Rocm91Z2hTdHJlYW0iLCJQYXNzVGhyb3VnaFN0cmVhbS5jb25zdHJ1Y3RvciIsIlBhc3NUaHJvdWdoU3RyZWFtLl93cml0ZSIsIlBhc3NUaHJvdWdoU3RyZWFtLl9yZWFkIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQU8sT0FBTyxXQUFXLFFBQVEsQ0FBQyxDQUFDO0FBQ25DLElBQU8sR0FBRyxXQUFXLFdBQVcsQ0FBQyxDQUFDO0FBR2xDO0lBQWlDQSwrQkFBZUE7SUFDNUNBLHFCQUFZQSxPQUFPQSxFQUFFQSxPQUE0QkE7UUFDN0NDLGtCQUFNQSwwQkFBMEJBLEVBQUVBLE9BQU9BLEVBQUVBLE9BQU9BLENBQUNBLENBQUFBO0lBQ3ZEQSxDQUFDQTtJQUVERCw4QkFBUUEsR0FBUkE7UUFDSUUsSUFBSUEsTUFBTUEsR0FBTUEsR0FBR0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esb0JBQWVBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQUdBLENBQUNBO1FBQ3hGQSxJQUFJQSxJQUFJQSxHQUFHQSxlQUFhQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFHQSxDQUFDQTtRQUN2RUEsTUFBTUEsQ0FBSUEsTUFBTUEsVUFBS0EsSUFBTUEsQ0FBQ0E7UUFFNUJBLGFBQWFBLElBQUlBO1lBQ2JDLE1BQU1BLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1FBQ3ZCQSxDQUFDQTtJQUNMRCxDQUFDQTtJQUNMRixrQkFBQ0E7QUFBREEsQ0FBQ0EsQUFkRCxFQUFpQyxHQUFHLENBQUMsV0FBVyxFQWMvQztBQWRZLG1CQUFXLGNBY3ZCLENBQUE7QUFFRDtJQUF1Q0kscUNBQWNBO0lBSWpEQSwyQkFBWUEsS0FBa0JBO1FBQzFCQyxrQkFBTUEsRUFBRUEsVUFBVUEsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFKeEJBLFdBQU1BLEdBQWVBLEVBQUVBLENBQUNBO1FBQ3hCQSxXQUFNQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUlmQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN2QkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDL0NBLENBQUNBO0lBQ0xBLENBQUNBO0lBRURELGtDQUFNQSxHQUFOQSxVQUFPQSxJQUFjQSxFQUFFQSxRQUFnQkEsRUFBRUEsRUFBb0JBO1FBQ3pERSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNSQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUNMQSxNQUFNQSxDQUFDQTtRQUNYQSxDQUFDQTtRQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoQkEsRUFBRUEsRUFBRUEsQ0FBQ0E7WUFDTEEsTUFBTUEsQ0FBQ0E7UUFDWEEsQ0FBQ0E7UUFDREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbEJBLEVBQUVBLENBQUNBLElBQUlBLFdBQVdBLENBQUNBLHlCQUF5QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDL0NBLE1BQU1BLENBQUNBO1FBQ1hBLENBQUNBO1FBQ0RBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ2hCQSxFQUFFQSxFQUFFQSxDQUFDQTtJQUNUQSxDQUFDQTtJQUVERixpQ0FBS0EsR0FBTEE7UUFDSUcsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQzFDQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNGQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNwQkEsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFDTEgsd0JBQUNBO0FBQURBLENBQUNBLEFBcENELEVBQXVDLE9BQU8sQ0FBQyxNQUFNLEVBb0NwRDtBQXBDWSx5QkFBaUIsb0JBb0M3QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9zdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbmltcG9ydCBfZ3UgPSByZXF1aXJlKCdndWxwLXV0aWwnKTtcbmltcG9ydCBfbGFuZyA9IHJlcXVpcmUoJy4vbGFuZycpO1xuXG5leHBvcnQgY2xhc3MgUGx1Z2luRXJyb3IgZXh0ZW5kcyBfZ3UuUGx1Z2luRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9wdGlvbnM/OiBQbHVnaW5FcnJvck9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoJ2d1bHAtdHlwZXNjcmlwdC1jb21waWxlcicsIG1lc3NhZ2UsIG9wdGlvbnMpXG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGxldCBoZWFkZXIgPSBgJHtfZ3UuY29sb3JzLnJlZCh0aGlzLm5hbWUpfSBpbiBwbHVnaW4gJyR7X2d1LmNvbG9ycy5jeWFuKHRoaXMucGx1Z2luKX0nYDtcbiAgICAgICAgbGV0IGJvZHkgPSBgTWVzc2FnZTpcXG4ke3RoaXMubWVzc2FnZS5zcGxpdCgnXFxuJykubWFwKHBhZCkuam9pbignXFxuJyl9YDtcbiAgICAgICAgcmV0dXJuIGAke2hlYWRlcn1cXG4ke2JvZHl9YDtcblxuICAgICAgICBmdW5jdGlvbiBwYWQobGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGFzc1Rocm91Z2hTdHJlYW0gZXh0ZW5kcyBfc3RyZWFtLkR1cGxleCB7XG4gICAgcHJpdmF0ZSBfZmlsZXM6IF9ndS5GaWxlW10gPSBbXTtcbiAgICBwcml2YXRlIF9pbmRleCA9IDA7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWxlcz86IF9ndS5GaWxlW10pIHtcbiAgICAgICAgc3VwZXIoeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmaWxlcykpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpbGVzID0gZmlsZXMuc2xpY2UoMCwgZmlsZXMubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF93cml0ZShmaWxlOiBfZ3UuRmlsZSwgZW5jb2Rpbmc6IHN0cmluZywgY2I6IChlcnJvcj8pID0+IHZvaWQpIHtcbiAgICAgICAgaWYgKCFmaWxlKSB7XG4gICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWxlLmlzTnVsbCgpKSB7XG4gICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWxlLmlzU3RyZWFtKCkpIHtcbiAgICAgICAgICAgIGNiKG5ldyBQbHVnaW5FcnJvcignU3RyZWFtaW5nIG5vdCBzdXBwb3J0ZWQnKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wdXNoKGZpbGUpO1xuICAgICAgICBjYigpO1xuICAgIH1cblxuICAgIF9yZWFkKCkge1xuICAgICAgICBpZiAodGhpcy5faW5kZXggPCB0aGlzLl9maWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaCh0aGlzLl9maWxlc1t0aGlzLl9pbmRleCsrXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnB1c2gobnVsbCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=