var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _stream = require('stream');
var _gu = require('gulp-util');
var PluginError = (function (_super) {
    __extends(PluginError, _super);
    function PluginError(message) {
        _super.call(this, 'gulp-typescript-compiler', message, {
            stack: null,
            showStack: false,
            showProperties: false
        });
    }
    PluginError.prototype.toString = function () {
        var header = _gu.colors.red(this.name) + " in plugin '" + _gu.colors.cyan(this.plugin) + "'";
        var body = "Message:\n" + this.message.split('\n').map(pad).join('\n');
        return header + "\n" + body;
        function pad(line) {
            return '  ' + line;
        }
    };
    return PluginError;
})(_gu.PluginError);
exports.PluginError = PluginError;
var InstantNotifier = (function () {
    function InstantNotifier() {
    }
    InstantNotifier.prototype.notify = function (message) {
        throw new PluginError(message);
    };
    return InstantNotifier;
})();
exports.InstantNotifier = InstantNotifier;
var AccumulatingNotifier = (function () {
    function AccumulatingNotifier() {
        this._all = [];
    }
    AccumulatingNotifier.prototype.notify = function (message) {
        this._all.push(message);
    };
    AccumulatingNotifier.prototype.fire = function () {
        if (this._all.length) {
            throw new PluginError(this._all.join('\n'));
        }
    };
    return AccumulatingNotifier;
})();
exports.AccumulatingNotifier = AccumulatingNotifier;
var PassThroughStream = (function (_super) {
    __extends(PassThroughStream, _super);
    function PassThroughStream(files) {
        _super.call(this, { objectMode: true });
        this._files = [];
        this._index = 0;
        if (Array.isArray(files)) {
            this._files = files.slice(0, files.length);
        }
    }
    PassThroughStream.prototype._write = function (file, encoding, cb) {
        if (!file) {
            cb();
            return;
        }
        if (file.isNull()) {
            cb();
            return;
        }
        if (file.isStream()) {
            cb(new PluginError('Streaming not supported'));
            return;
        }
        this.push(file);
        cb();
    };
    PassThroughStream.prototype._read = function () {
        if (this._index < this._files.length) {
            this.push(this._files[this._index++]);
        }
        else {
            this.push(null);
        }
    };
    return PassThroughStream;
})(_stream.Duplex);
exports.PassThroughStream = PassThroughStream;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOlsiUGx1Z2luRXJyb3IiLCJQbHVnaW5FcnJvci5jb25zdHJ1Y3RvciIsIlBsdWdpbkVycm9yLnRvU3RyaW5nIiwiUGx1Z2luRXJyb3IudG9TdHJpbmcucGFkIiwiSW5zdGFudE5vdGlmaWVyIiwiSW5zdGFudE5vdGlmaWVyLmNvbnN0cnVjdG9yIiwiSW5zdGFudE5vdGlmaWVyLm5vdGlmeSIsIkFjY3VtdWxhdGluZ05vdGlmaWVyIiwiQWNjdW11bGF0aW5nTm90aWZpZXIuY29uc3RydWN0b3IiLCJBY2N1bXVsYXRpbmdOb3RpZmllci5ub3RpZnkiLCJBY2N1bXVsYXRpbmdOb3RpZmllci5maXJlIiwiUGFzc1Rocm91Z2hTdHJlYW0iLCJQYXNzVGhyb3VnaFN0cmVhbS5jb25zdHJ1Y3RvciIsIlBhc3NUaHJvdWdoU3RyZWFtLl93cml0ZSIsIlBhc3NUaHJvdWdoU3RyZWFtLl9yZWFkIl0sIm1hcHBpbmdzIjoiOzs7OztBQUdBLElBQU8sT0FBTyxXQUFXLFFBQVEsQ0FBQyxDQUFDO0FBQ25DLElBQU8sR0FBRyxXQUFXLFdBQVcsQ0FBQyxDQUFDO0FBR2xDO0lBQWlDQSwrQkFBZUE7SUFDNUNBLHFCQUFZQSxPQUFPQTtRQUNmQyxrQkFBTUEsMEJBQTBCQSxFQUFFQSxPQUFPQSxFQUFFQTtZQUN2Q0EsS0FBS0EsRUFBRUEsSUFBSUE7WUFDWEEsU0FBU0EsRUFBRUEsS0FBS0E7WUFDaEJBLGNBQWNBLEVBQUVBLEtBQUtBO1NBQ3hCQSxDQUFDQSxDQUFBQTtJQUNOQSxDQUFDQTtJQUVERCw4QkFBUUEsR0FBUkE7UUFDSUUsSUFBSUEsTUFBTUEsR0FBTUEsR0FBR0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esb0JBQWVBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENB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LENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ2hCQSxFQUFFQSxFQUFFQSxDQUFDQTtJQUNUQSxDQUFDQTtJQUVERixpQ0FBS0EsR0FBTEE7UUFDSUcsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQzFDQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNGQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNwQkEsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFDTEgsd0JBQUNBO0FBQURBLENBQUNBLEFBcENELEVBQXVDLE9BQU8sQ0FBQyxNQUFNLEVBb0NwRDtBQXBDWSx5QkFBaUIsb0JBb0M3QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF90cyA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQnKTtcbmltcG9ydCBfZnMgPSByZXF1aXJlKCdmcycpO1xuaW1wb3J0IF9wYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IF9zdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbmltcG9ydCBfZ3UgPSByZXF1aXJlKCdndWxwLXV0aWwnKTtcbmltcG9ydCBfbGFuZyA9IHJlcXVpcmUoJy4vbGFuZycpO1xuXG5leHBvcnQgY2xhc3MgUGx1Z2luRXJyb3IgZXh0ZW5kcyBfZ3UuUGx1Z2luRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIoJ2d1bHAtdHlwZXNjcmlwdC1jb21waWxlcicsIG1lc3NhZ2UsIHtcbiAgICAgICAgICAgIHN0YWNrOiBudWxsLFxuICAgICAgICAgICAgc2hvd1N0YWNrOiBmYWxzZSxcbiAgICAgICAgICAgIHNob3dQcm9wZXJ0aWVzOiBmYWxzZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBsZXQgaGVhZGVyID0gYCR7X2d1LmNvbG9ycy5yZWQodGhpcy5uYW1lKX0gaW4gcGx1Z2luICcke19ndS5jb2xvcnMuY3lhbih0aGlzLnBsdWdpbil9J2A7XG4gICAgICAgIGxldCBib2R5ID0gYE1lc3NhZ2U6XFxuJHt0aGlzLm1lc3NhZ2Uuc3BsaXQoJ1xcbicpLm1hcChwYWQpLmpvaW4oJ1xcbicpfWA7XG4gICAgICAgIHJldHVybiBgJHtoZWFkZXJ9XFxuJHtib2R5fWA7XG5cbiAgICAgICAgZnVuY3Rpb24gcGFkKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBOb3RpZmllciB7XG4gICAgbm90aWZ5KG1lc3NhZ2U6IHN0cmluZyk7XG59XG5cbmV4cG9ydCBjbGFzcyBJbnN0YW50Tm90aWZpZXIgaW1wbGVtZW50cyBOb3RpZmllciB7XG4gICAgbm90aWZ5KG1lc3NhZ2U6IHN0cmluZykge1xuICAgICAgICB0aHJvdyBuZXcgUGx1Z2luRXJyb3IobWVzc2FnZSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWNjdW11bGF0aW5nTm90aWZpZXIgaW1wbGVtZW50cyBOb3RpZmllciB7XG4gICAgcHJpdmF0ZSBfYWxsOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgbm90aWZ5KG1lc3NhZ2U6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9hbGwucHVzaChtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBmaXJlKCkge1xuICAgICAgICBpZiAodGhpcy5fYWxsLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBsdWdpbkVycm9yKHRoaXMuX2FsbC5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXNzVGhyb3VnaFN0cmVhbSBleHRlbmRzIF9zdHJlYW0uRHVwbGV4IHtcbiAgICBwcml2YXRlIF9maWxlczogX2d1LkZpbGVbXSA9IFtdO1xuICAgIHByaXZhdGUgX2luZGV4ID0gMDtcblxuICAgIGNvbnN0cnVjdG9yKGZpbGVzPzogX2d1LkZpbGVbXSkge1xuICAgICAgICBzdXBlcih7IG9iamVjdE1vZGU6IHRydWUgfSk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZpbGVzKSkge1xuICAgICAgICAgICAgdGhpcy5fZmlsZXMgPSBmaWxlcy5zbGljZSgwLCBmaWxlcy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3dyaXRlKGZpbGU6IF9ndS5GaWxlLCBlbmNvZGluZzogc3RyaW5nLCBjYjogKGVycm9yPykgPT4gdm9pZCkge1xuICAgICAgICBpZiAoIWZpbGUpIHtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbGUuaXNOdWxsKCkpIHtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbGUuaXNTdHJlYW0oKSkge1xuICAgICAgICAgICAgY2IobmV3IFBsdWdpbkVycm9yKCdTdHJlYW1pbmcgbm90IHN1cHBvcnRlZCcpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnB1c2goZmlsZSk7XG4gICAgICAgIGNiKCk7XG4gICAgfVxuXG4gICAgX3JlYWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbmRleCA8IHRoaXMuX2ZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5wdXNoKHRoaXMuX2ZpbGVzW3RoaXMuX2luZGV4KytdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==