/// <reference path="../d/typescript-1.6.d.ts" />
var _compiler = require('../compiler');
var _lang = require('../lang');
var TS_1_6_Adapter = (function () {
    function TS_1_6_Adapter(_ts) {
        this._ts = _ts;
    }
    TS_1_6_Adapter.prototype.options = function () {
        return [
            {
                name: 'charset',
                type: 'string',
            },
            {
                name: 'declaration',
                type: 'boolean',
            },
            {
                name: 'diagnostics',
                type: 'boolean',
            },
            {
                name: 'emitBOM',
                type: 'boolean'
            },
            {
                name: 'emitDecoratorMetadata',
                type: 'boolean',
                experimental: true,
            },
            {
                name: 'experimentalAsyncFunctions',
                type: 'boolean',
            },
            {
                name: 'experimentalDecorators',
                type: 'boolean',
            },
            {
                name: 'help',
                type: 'boolean',
            },
            {
                name: 'init',
                type: 'boolean',
            },
            {
                name: 'inlineSourceMap',
                type: 'boolean',
            },
            {
                name: 'inlineSources',
                type: 'boolean',
            },
            {
                name: 'isolatedModules',
                type: 'boolean',
            },
            {
                name: 'jsx',
                type: {
                    'preserve': 1 /* Preserve */,
                    'react': 2 /* React */,
                },
            },
            {
                name: 'listFiles',
                type: 'boolean',
            },
            {
                name: 'locale',
                type: 'string',
            },
            {
                name: 'mapRoot',
                type: 'string',
                isFilePath: true,
            },
            {
                name: 'module',
                type: {
                    'commonjs': 1 /* CommonJS */,
                    'amd': 2 /* AMD */,
                    'system': 4 /* System */,
                    'umd': 3 /* UMD */,
                },
            },
            {
                name: 'moduleResolution',
                type: {
                    'node': 2 /* NodeJs */,
                    'classic': 1 /* Classic */,
                },
            },
            {
                name: 'newLine',
                type: {
                    'crlf': 0 /* CarriageReturnLineFeed */,
                    'lf': 1 /* LineFeed */,
                },
            },
            {
                name: 'noEmit',
                type: 'boolean',
            },
            {
                name: 'noEmitHelpers',
                type: 'boolean',
            },
            {
                name: 'noEmitOnError',
                type: 'boolean',
            },
            {
                name: 'noImplicitAny',
                type: 'boolean',
            },
            {
                name: 'noLib',
                type: 'boolean',
            },
            {
                name: 'noResolve',
                type: 'boolean',
            },
            {
                name: 'outDir',
                type: 'string',
                isFilePath: true,
            },
            {
                name: 'outFile',
                type: 'string',
                isFilePath: true,
            },
            {
                name: 'preserveConstEnums',
                type: 'boolean',
            },
            {
                name: 'removeComments',
                type: 'boolean',
            },
            {
                name: 'rootDir',
                type: 'string',
                isFilePath: true,
            },
            {
                name: 'skipDefaultLibCheck',
                type: 'boolean',
            },
            {
                name: 'sourceMap',
                type: 'boolean',
            },
            {
                name: 'sourceRoot',
                type: 'string',
                isFilePath: true,
            },
            {
                name: 'suppressExcessPropertyErrors',
                type: 'boolean',
                experimental: true
            },
            {
                name: 'suppressImplicitAnyIndexErrors',
                type: 'boolean',
            },
            {
                name: 'stripInternal',
                type: 'boolean',
                experimental: true
            },
            {
                name: 'target',
                type: {
                    'es3': 0 /* ES3 */,
                    'es5': 1 /* ES5 */,
                    'es6': 2 /* ES6 */,
                },
            },
        ];
    };
    TS_1_6_Adapter.prototype.compile = function (options, fileNames, result) {
        var host = this._ts.createCompilerHost(options);
        var program = this._ts.createProgram(fileNames, options, new CompilerHost(host));
        this._reportDiagnostics(program.getOptionsDiagnostics(), result);
        this._reportDiagnostics(program.getGlobalDiagnostics(), result);
        this._reportDiagnostics(program.getSyntacticDiagnostics(), result);
        this._reportDiagnostics(program.getSemanticDiagnostics(), result);
        this._reportDiagnostics(program.getDeclarationDiagnostics(), result);
        var emitResult = program.emit(undefined, write, undefined);
        result.emitSkipped = emitResult.emitSkipped;
        this._reportDiagnostics(emitResult.diagnostics, result);
        function write(fileName, data) {
            result._create(options.rootDir, fileName, data);
        }
    };
    TS_1_6_Adapter.prototype._reportDiagnostics = function (diagnostics, result) {
        for (var _i = 0; _i < diagnostics.length; _i++) {
            var diagnostic = diagnostics[_i];
            this._reportDiagnostic(diagnostic, result);
        }
    };
    TS_1_6_Adapter.prototype._reportDiagnostic = function (diagnostic, result) {
        var category = (_a = {},
            _a[this._ts.DiagnosticCategory.Warning] = _compiler.DiagnosticCategory.Warning,
            _a[this._ts.DiagnosticCategory.Error] = _compiler.DiagnosticCategory.Error,
            _a[this._ts.DiagnosticCategory.Message] = _compiler.DiagnosticCategory.Message,
            _a
        );
        var d = empty();
        if (diagnostic.file) {
            var p = this._ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start);
            d.fileName = diagnostic.file.fileName;
            d.start = diagnostic.start;
            d.length = diagnostic.length;
            d.line = p.line;
            d.character = p.character;
        }
        d.category = category[diagnostic.category];
        d.code = diagnostic.code;
        if (_lang.isString(diagnostic.messageText)) {
            d.message = diagnostic.messageText;
        }
        else {
            message(d, diagnostic.messageText);
        }
        result.diagnostics.push(d);
        function message(d, next) {
            d.message = next.messageText;
            next = next.next;
            while (next) {
                var t = empty();
                t.category = category[next.category];
                t.code = next.code;
                t.message = next.messageText;
                d.next = t;
                d = t;
                next = next.next;
            }
        }
        function empty() {
            return {
                fileName: null,
                start: null,
                length: null,
                line: null,
                character: null,
                category: null,
                code: null,
                message: null,
                next: null
            };
        }
        var _a;
    };
    TS_1_6_Adapter.VERSION = '~1.6.2';
    return TS_1_6_Adapter;
})();
var CompilerHost = (function () {
    function CompilerHost(target) {
        this._target = target;
    }
    CompilerHost.prototype.writeFile = function (fileName, data, writeByteOrderMark, onError) {
        this._target.writeFile(fileName, data, writeByteOrderMark, onError);
    };
    CompilerHost.prototype.getSourceFile = function (fileName, languageVersion, onError) {
        return this._target.getSourceFile(fileName, languageVersion, onError);
    };
    CompilerHost.prototype.getDefaultLibFileName = function (options) {
        return this._target.getDefaultLibFileName(options);
    };
    CompilerHost.prototype.getCurrentDirectory = function () {
        return this._target.getCurrentDirectory();
    };
    CompilerHost.prototype.getCanonicalFileName = function (fileName) {
        return this._target.getCanonicalFileName(fileName);
    };
    CompilerHost.prototype.useCaseSensitiveFileNames = function () {
        return this._target.useCaseSensitiveFileNames();
    };
    CompilerHost.prototype.getNewLine = function () {
        return this._target.getNewLine();
    };
    CompilerHost.prototype.fileExists = function (fileName) {
        return this._target.fileExists(fileName);
    };
    CompilerHost.prototype.readFile = function (fileName) {
        return this._target.readFile(fileName);
    };
    return CompilerHost;
})();
module.exports = TS_1_6_Adapter;
//# sourceMappingURL=data:application/json;base64,