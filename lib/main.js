/// <reference path="../typings/tsd.d.ts" />
var _path = require('path');
var _glob = require('glob');
var _util = require('./util');
var _compiler = require('./compiler');
var _adapter = require('./adapter');
var _lang = require('./lang');
var S_TYPESCRIPT = 'typescript';
function plugin(config, globs) {
    var result = new _compiler.Result();
    if (!_lang.isObject(config)) {
        throw new _util.PluginError("The config argument is not an object");
    }
    if (!_lang.isString(globs)) {
        if (!Array.isArray(globs) || !globs.every(_lang.isString)) {
            throw new _util.PluginError("The globs argument is not a string or array of strings");
        }
    }
    else {
        globs = [globs];
    }
    var fileNames = findFiles(globs);
    if (!fileNames.length) {
        throw new _util.PluginError("The matched file set is empty");
    }
    var adapter = loadAdapter(config);
    var options = parseOptions(adapter.options(), config, result);
    if (result.diagnostics.length) {
        result.reportDiagnostics();
    }
    else {
        adapter.compile(options, fileNames, result);
        if (result.diagnostics.length) {
            result.reportDiagnostics();
        }
    }
    return result;
}
function findFiles(globs) {
    var fileNames = [];
    for (var _i = 0; _i < globs.length; _i++) {
        var glob = globs[_i];
        fileNames = fileNames.concat(_glob.sync(glob, { nodir: true }));
    }
    return fileNames.map(resolvePath).filter(unique);
    function unique(value, index, array) {
        return array.indexOf(value) === index;
    }
}
function loadAdapter(config) {
    if (S_TYPESCRIPT in config) {
        return _adapter.load(config[S_TYPESCRIPT]);
    }
    else {
        return _adapter.load(require('typescript'));
    }
}
function parseOptions(optionsList, config, result) {
    var options = Object.create(null);
    var optionsMap = _lang.groupBy(optionsList, 'name');
    _lang.forEach(config, validate);
    if (options.rootDir == null) {
        options.rootDir = resolvePath('.');
    }
    return options;
    function validate(name, value) {
        if (name === S_TYPESCRIPT) {
        }
        else if (name in optionsMap) {
            var option = optionsMap[name];
            switch (option.type) {
                case 'string':
                    if (!_lang.isString(value)) {
                        error("Expected string value of the config property '" + name + "'");
                        return;
                    }
                    break;
                case 'number':
                    if (!_lang.isNumber(value)) {
                        error("Expected number value of the config property '" + name + "'");
                        return;
                    }
                    break;
                case 'boolean':
                    if (!_lang.isBoolean(value)) {
                        error("Expected boolean value of the config property '" + name + "'");
                        return;
                    }
                    break;
                default:
                    if (value in option.type) {
                        value = option.type[value];
                    }
                    else {
                        error(("Unknown value '" + value + "' of the config property '" + name + "', ") +
                            ("expected one of " + Object.keys(option.type).map(function (s) { return ("'" + s + "'"); }).join(', ')));
                        return;
                    }
                    break;
            }
            if (option.isFilePath) {
                value = resolvePath(value);
            }
            options[name] = value;
        }
        else {
            error("Unknown config property '" + name + "'");
            return;
        }
    }
    function error(message) {
        result.diagnostics.push({
            fileName: null,
            start: null,
            length: null,
            line: null,
            character: null,
            category: _compiler.DiagnosticCategory.Error,
            code: 9999,
            message: message,
            next: null
        });
    }
}
function resolvePath(path) {
    return _path.normalize(_path.resolve(process.cwd(), path));
}
module.exports = plugin;
//# sourceMappingURL=data:application/json;base64,