/// <reference path="../typings/tsd.d.ts" />
var _path = require('path');
var _glob = require('glob');
var _util = require('./util');
var _compiler = require('./compiler');
var _adapter = require('./adapter');
var _lang = require('./lang');
var S_TYPESCRIPT = 'typescript';
function plugin(config, globs) {
    var result = new _compiler.Result();
    if (!_lang.isObject(config)) {
        throw new _util.PluginError("The config argument is not an object");
    }
    if (!_lang.isString(globs)) {
        if (!Array.isArray(globs) || !globs.every(_lang.isString)) {
            throw new _util.PluginError("The globs argument is not a string or array of strings");
        }
    }
    else {
        globs = [globs];
    }
    var fileNames = findFiles(globs);
    if (!fileNames.length) {
        throw new _util.PluginError("The matched file set is empty");
    }
    var adapter = loadAdapter(config);
    adapter.compile(parseConfig(config), fileNames, result);
    if (result.diagnostics.length) {
        result.reportDiagnostics();
    }
    return result;
}
function findFiles(globs) {
    var fileNames = [];
    for (var _i = 0; _i < globs.length; _i++) {
        var glob = globs[_i];
        fileNames = fileNames.concat(_glob.sync(glob, { nodir: true }));
    }
    return fileNames.map(resolvePath).filter(unique);
    function resolvePath(path) {
        return _path.normalize(_path.resolve(process.cwd(), path));
    }
    function unique(value, index, array) {
        return array.indexOf(value) === index;
    }
}
function loadAdapter(config) {
    if (S_TYPESCRIPT in config) {
        return _adapter.load(config[S_TYPESCRIPT]);
    }
    else {
        return _adapter.load(require('typescript'));
    }
}
function parseConfig(config) {
    var options = Object.create(null);
    _lang.forEach(config, function (name, value) {
        if (name === S_TYPESCRIPT) {
        }
        else {
            options[name] = value;
        }
    });
    return options;
}
module.exports = plugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOlsicGx1Z2luIiwiZmluZEZpbGVzIiwiZmluZEZpbGVzLnJlc29sdmVQYXRoIiwiZmluZEZpbGVzLnVuaXF1ZSIsImxvYWRBZGFwdGVyIiwicGFyc2VDb25maWciXSwibWFwcGluZ3MiOiJBQUFBLDRDQUE0QztBQUc1QyxJQUFPLEtBQUssV0FBVyxNQUFNLENBQUMsQ0FBQztBQUMvQixJQUFPLEtBQUssV0FBVyxNQUFNLENBQUMsQ0FBQztBQUMvQixJQUFPLEtBQUssV0FBVyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFPLFNBQVMsV0FBVyxZQUFZLENBQUMsQ0FBQztBQUN6QyxJQUFPLFFBQVEsV0FBVyxXQUFXLENBQUMsQ0FBQztBQUN2QyxJQUFPLEtBQUssV0FBVyxRQUFRLENBQUMsQ0FBQztBQUVqQyxJQUFNLFlBQVksR0FBRyxZQUFZLENBQUM7QUFFbEMsZ0JBQWdCLE1BQWMsRUFBRSxLQUF3QjtJQUNwREEsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsU0FBU0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7SUFFcENBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQzFCQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSxXQUFXQSxDQUFDQSxzQ0FBc0NBLENBQUNBLENBQUNBO0lBQ3hFQSxDQUFDQTtJQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN6QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FB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Q0EsSUFBSUEsRUFBRUEsS0FBS0E7UUFDOUJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLEtBQUtBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO1FBRTVCQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNGQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUMxQkEsQ0FBQ0E7SUFDTEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFSEEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7QUFDbkJBLENBQUNBO0FBRUQsaUJBQVMsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuXG5pbXBvcnQgX2ZzID0gcmVxdWlyZSgnZnMnKTtcbmltcG9ydCBfcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCBfZ2xvYiA9IHJlcXVpcmUoJ2dsb2InKTtcbmltcG9ydCBfdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuaW1wb3J0IF9jb21waWxlciA9IHJlcXVpcmUoJy4vY29tcGlsZXInKTtcbmltcG9ydCBfYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcicpO1xuaW1wb3J0IF9sYW5nID0gcmVxdWlyZSgnLi9sYW5nJyk7XG5cbmNvbnN0IFNfVFlQRVNDUklQVCA9ICd0eXBlc2NyaXB0JztcblxuZnVuY3Rpb24gcGx1Z2luKGNvbmZpZzogT2JqZWN0LCBnbG9iczogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICBsZXQgcmVzdWx0ID0gbmV3IF9jb21waWxlci5SZXN1bHQoKTtcblxuICAgIGlmICghX2xhbmcuaXNPYmplY3QoY29uZmlnKSkge1xuICAgICAgICB0aHJvdyBuZXcgX3V0aWwuUGx1Z2luRXJyb3IoYFRoZSBjb25maWcgYXJndW1lbnQgaXMgbm90IGFuIG9iamVjdGApO1xuICAgIH1cbiAgICBpZiAoIV9sYW5nLmlzU3RyaW5nKGdsb2JzKSkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZ2xvYnMpIHx8ICFnbG9icy5ldmVyeShfbGFuZy5pc1N0cmluZykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBfdXRpbC5QbHVnaW5FcnJvcihgVGhlIGdsb2JzIGFyZ3VtZW50IGlzIG5vdCBhIHN0cmluZyBvciBhcnJheSBvZiBzdHJpbmdzYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdsb2JzID0gWzxzdHJpbmc+Z2xvYnNdO1xuICAgIH1cblxuICAgIGxldCBmaWxlTmFtZXMgPSBmaW5kRmlsZXMoPHN0cmluZ1tdPmdsb2JzKTtcbiAgICBpZiAoIWZpbGVOYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IF91dGlsLlBsdWdpbkVycm9yKGBUaGUgbWF0Y2hlZCBmaWxlIHNldCBpcyBlbXB0eWApO1xuICAgIH1cblxuICAgIGxldCBhZGFwdGVyID0gbG9hZEFkYXB0ZXIoY29uZmlnKTtcbiAgICBhZGFwdGVyLmNvbXBpbGUocGFyc2VDb25maWcoY29uZmlnKSwgZmlsZU5hbWVzLCByZXN1bHQpO1xuICAgIGlmIChyZXN1bHQuZGlhZ25vc3RpY3MubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdC5yZXBvcnREaWFnbm9zdGljcygpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRGaWxlcyhnbG9iczogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG4gICAgbGV0IGZpbGVOYW1lczogc3RyaW5nW10gPSBbXTtcblxuICAgIGZvciAobGV0IGdsb2Igb2YgZ2xvYnMpIHtcbiAgICAgICAgZmlsZU5hbWVzID0gZmlsZU5hbWVzLmNvbmNhdChfZ2xvYi5zeW5jKGdsb2IsIHsgbm9kaXI6IHRydWUgfSkpO1xuICAgIH1cblxuICAgIHJldHVybiBmaWxlTmFtZXMubWFwKHJlc29sdmVQYXRoKS5maWx0ZXIodW5pcXVlKTtcblxuICAgIGZ1bmN0aW9uIHJlc29sdmVQYXRoKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBfcGF0aC5ub3JtYWxpemUoX3BhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBwYXRoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5pcXVlPFQ+KHZhbHVlOiBULCBpbmRleDogbnVtYmVyLCBhcnJheTogVFtdKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBhcnJheS5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBsb2FkQWRhcHRlcihjb25maWc6IE9iamVjdCk6IF9jb21waWxlci5Db21waWxlciB7XG4gICAgaWYgKFNfVFlQRVNDUklQVCBpbiBjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIF9hZGFwdGVyLmxvYWQoY29uZmlnW1NfVFlQRVNDUklQVF0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9hZGFwdGVyLmxvYWQocmVxdWlyZSgndHlwZXNjcmlwdCcpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ29uZmlnKGNvbmZpZzogT2JqZWN0KTogT2JqZWN0IHtcbiAgICBsZXQgb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBfbGFuZy5mb3JFYWNoKGNvbmZpZywgKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmIChuYW1lID09PSBTX1RZUEVTQ1JJUFQpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZS5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbmV4cG9ydCA9IHBsdWdpbjtcbiJdfQ==