/// <reference path='../typings/tsd.d.ts' />
var _ts = require('typescript');
var _fs = require('fs');
var _path = require('path');
var _glob = require('glob');
var _gu = require('gulp-util');
var _util = require('./util');
var _options = require('./options');
var _lang = require('./lang');
var Plugin = (function () {
    function Plugin(_options, _fileNames) {
        this._options = _options;
        this._fileNames = _fileNames;
        this._files = Object.create(null);
        this._scripts = [];
        this._sourceMaps = [];
        this._declarations = [];
        var host = _ts.createCompilerHost(_options);
        var program = _ts.createProgram(_fileNames, _options, host);
        var diagnostics = [].concat(program.getSyntacticDiagnostics(), program.getOptionsDiagnostics(), program.getGlobalDiagnostics(), program.getSemanticDiagnostics());
        if (diagnostics.length > 0) {
            reportDiagnostics(diagnostics);
        }
        else {
            var result = program.emit(undefined, this._write.bind(this), undefined);
            if (result.diagnostics.length > 0) {
                reportDiagnostics(result.diagnostics);
            }
            else {
                _lang.forEach(this._files, function (base, fileGroup) {
                    fileGroup.script.sourceMap = fileGroup.sourceMap;
                    fileGroup.script.declaration = fileGroup.declaration;
                });
            }
        }
    }
    Plugin.prototype._write = function (fileName, data) {
        var file = new _gu.File({
            path: fileName,
            base: this._options.rootDir,
            contents: new Buffer(data)
        });
        var _a = findExt(fileName.toLowerCase()), base = _a.base, ext = _a.ext;
        switch (ext) {
            case '.js':
            case '.jsx':
                this._scripts.push(file);
                this._findFileGroup(base).script = file;
                break;
            case '.js.map':
            case '.jsx.map':
                this._sourceMaps.push(file);
                this._findFileGroup(base).sourceMap = file;
                break;
            case '.d.ts':
                this._declarations.push(file);
                this._findFileGroup(base).declaration = file;
                break;
            default:
                throw new Error("Unknown file type '" + fileName + "'");
        }
    };
    Plugin.prototype._findFileGroup = function (base) {
        var fileGroup = this._files[base];
        if (fileGroup == null) {
            fileGroup = this._files[base] = {
                script: null,
                sourceMap: null,
                declaration: null,
            };
        }
        return fileGroup;
    };
    Plugin.prototype.emit = function () {
        return new _util.PassThroughStream([].concat(this._scripts, this._sourceMaps, this._declarations));
    };
    Plugin.prototype.emitScripts = function () {
        return new _util.PassThroughStream(this._scripts);
    };
    Plugin.prototype.emitSourceMaps = function () {
        return new _util.PassThroughStream(this._sourceMaps);
    };
    Plugin.prototype.emitDeclarations = function () {
        return new _util.PassThroughStream(this._declarations);
    };
    Plugin.prototype.writeFiles = function () {
        var files = [].concat(this._scripts, this._sourceMaps, this._declarations);
        for (var _i = 0; _i < files.length; _i++) {
            var file = files[_i];
            mkdirpSync(_path.dirname(file.path));
            _fs.writeFileSync(file.path, file.contents, { encoding: 'UTF-8' });
        }
        function mkdirpSync(path) {
            try {
                var stats = _fs.lstatSync(path);
            }
            catch (ex) { }
            if (!stats || !stats.isDirectory()) {
                mkdirpSync(_path.dirname(path));
                _fs.mkdirSync(path);
            }
        }
    };
    return Plugin;
})();
function plugin(config, globs) {
    if (!_lang.isObject(config)) {
        throw new _util.PluginError("The config argument is not an object");
    }
    if (!_lang.isString(globs)) {
        if (!Array.isArray(globs)) {
            throw new _util.PluginError("The globs argument is not a string or array of strings");
        }
    }
    else {
        globs = [globs];
    }
    var fileNames = findFiles(globs);
    if (!fileNames.length) {
        throw new _util.PluginError("The matched file set is empty");
    }
    var adapter = _options.loadAdapter(config);
    var notifier = new _util.AccumulatingNotifier();
    var options = _options.parseCompilerOptions(config, resolvePath, notifier);
    notifier.fire();
    return new Plugin(options, fileNames);
}
function findFiles(globs) {
    var fileNames = [];
    for (var _i = 0; _i < globs.length; _i++) {
        var glob = globs[_i];
        fileNames = fileNames.concat(_glob.sync(glob, { nodir: true }));
    }
    return fileNames.map(resolvePath).filter(unique);
    function unique(value, index, array) {
        return array.indexOf(value) === index;
    }
}
function resolvePath(path) {
    return _path.normalize(_path.resolve(process.cwd(), path));
}
function findExt(path) {
    var suffixes = ['.js', '.jsx', '.js.map', '.jsx.map', '.d.ts'];
    for (var _i = 0; _i < suffixes.length; _i++) {
        var suffix = suffixes[_i];
        if (path.endsWith(suffix)) {
            return {
                base: path.substring(0, path.length - suffix.length),
                ext: suffix
            };
        }
    }
    return {
        base: path,
        ext: null
    };
}
function reportDiagnostics(diagnostics) {
    for (var _i = 0; _i < diagnostics.length; _i++) {
        var diagnostic = diagnostics[_i];
        reportDiagnostic(diagnostic);
    }
}
function reportDiagnostic(diagnostic) {
    var output = '';
    if (diagnostic.file) {
        var loc = _ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start);
        output += diagnostic.file.fileName + "(" + (loc.line + 1) + "," + (loc.character + 1) + "): ";
    }
    var category = _ts.DiagnosticCategory[diagnostic.category].toLowerCase();
    output += category + " TS" + diagnostic.code + ": " + flattenDiagnosticMessage(diagnostic.messageText) + "\n";
    console.error(output);
}
function flattenDiagnosticMessage(message) {
    if (typeof message === 'string') {
        return message;
    }
    else {
        var diagnostic = message;
        var result = '';
        var indent = 0;
        while (diagnostic) {
            if (indent) {
                result += '\n';
                for (var i = 0; i < indent; i++) {
                    result += '  ';
                }
            }
            result += diagnostic.messageText;
            indent++;
            diagnostic = diagnostic.next;
        }
        return result;
    }
}
module.exports = plugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOlsiUGx1Z2luIiwiUGx1Z2luLmNvbnN0cnVjdG9yIiwiUGx1Z2luLl93cml0ZSIsIlBsdWdpbi5fZmluZEZpbGVHcm91cCIsIlBsdWdpbi5lbWl0IiwiUGx1Z2luLmVtaXRTY3JpcHRzIiwiUGx1Z2luLmVtaXRTb3VyY2VNYXBzIiwiUGx1Z2luLmVtaXREZWNsYXJhdGlvbnMiLCJQbHVnaW4ud3JpdGVGaWxlcyIsIlBsdWdpbi53cml0ZUZpbGVzLm1rZGlycFN5bmMiLCJwbHVnaW4iLCJmaW5kRmlsZXMiLCJmaW5kRmlsZXMudW5pcXVlIiwicmVzb2x2ZVBhdGgiLCJmaW5kRXh0IiwicmVwb3J0RGlhZ25vc3RpY3MiLCJyZXBvcnREaWFnbm9zdGljIiwiZmxhdHRlbkRpYWdub3N0aWNNZXNzYWdlIl0sIm1hcHBpbmdzIjoiQUFBQSw0Q0FBNEM7QUFFNUMsSUFBTyxHQUFHLFdBQVcsWUFBWSxDQUFDLENBQUM7QUFDbkMsSUFBTyxHQUFHLFdBQVcsSUFBSSxDQUFDLENBQUM7QUFDM0IsSUFBTyxLQUFLLFdBQVcsTUFBTSxDQUFDLENBQUM7QUFHL0IsSUFBTyxLQUFLLFdBQVcsTUFBTSxDQUFDLENBQUM7QUFDL0IsSUFBTyxHQUFHLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFDbEMsSUFBTyxLQUFLLFdBQVcsUUFBUSxDQUFDLENBQUM7QUFFakMsSUFBTyxRQUFRLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFDdkMsSUFBTyxLQUFLLFdBQVcsUUFBUSxDQUFDLENBQUM7QUFRakM7SUFNSUEsZ0JBQW1CQSxRQUE2QkEsRUFBU0EsVUFBb0JBO1FBQTFEQyxhQUFRQSxHQUFSQSxRQUFRQSxDQUFxQkE7UUFBU0EsZUFBVUEsR0FBVkEsVUFBVUEsQ0FBVUE7UUFMN0VBLFdBQU1BLEdBQXlCQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNuREEsYUFB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QSxDQUFDQTtRQUM5QkEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7SUFDbkJBLENBQUNBO0lBQ0RBLElBQUlBLENBQUNBLENBQUNBO1FBQ0ZBLElBQUlBLFVBQVVBLEdBQUdBLE9BQU9BLENBQUNBO1FBQ3pCQSxJQUFJQSxNQUFNQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNoQkEsSUFBSUEsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDZkEsT0FBT0EsVUFBVUEsRUFBRUEsQ0FBQ0E7WUFDaEJBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO2dCQUNUQSxNQUFNQSxJQUFJQSxJQUFJQSxDQUFDQTtnQkFFZkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsTUFBTUEsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7b0JBQzlCQSxNQUFNQSxJQUFJQSxJQUFJQSxDQUFDQTtnQkFDbkJBLENBQUNBO1lBQ0xBLENBQUNBO1lBQ0RBLE1BQU1BLElBQUlBLFVBQVVBLENBQUNBLFdBQVdBLENBQUNBO1lBQ2pDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUNUQSxVQUFVQSxHQUFHQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNqQ0EsQ0FBQ0E7UUFDREEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7SUFDbEJBLENBQUNBO0FBQ0xBLENBQUNBO0FBRUQsaUJBQVMsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vdHlwaW5ncy90c2QuZC50cycgLz5cblxuaW1wb3J0IF90cyA9IHJlcXVpcmUoJ3R5cGVzY3JpcHQnKTtcbmltcG9ydCBfZnMgPSByZXF1aXJlKCdmcycpO1xuaW1wb3J0IF9wYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IF9zdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbmltcG9ydCBfdmlueWwgPSByZXF1aXJlKCd2aW55bCcpO1xuaW1wb3J0IF9nbG9iID0gcmVxdWlyZSgnZ2xvYicpO1xuaW1wb3J0IF9ndSA9IHJlcXVpcmUoJ2d1bHAtdXRpbCcpO1xuaW1wb3J0IF91dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5pbXBvcnQgX2FkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXInKTtcbmltcG9ydCBfb3B0aW9ucyA9IHJlcXVpcmUoJy4vb3B0aW9ucycpO1xuaW1wb3J0IF9sYW5nID0gcmVxdWlyZSgnLi9sYW5nJyk7XG5cbmludGVyZmFjZSBGaWxlR3JvdXAge1xuICAgIHNjcmlwdDogX2d1LkZpbGU7XG4gICAgc291cmNlTWFwOiBfZ3UuRmlsZTtcbiAgICBkZWNsYXJhdGlvbjogX2d1LkZpbGU7XG59XG5cbmNsYXNzIFBsdWdpbiB7XG4gICAgX2ZpbGVzOiBfbGFuZy5NYXA8RmlsZUdyb3VwPiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgX3NjcmlwdHM6IF9ndS5GaWxlW10gPSBbXTtcbiAgICBfc291cmNlTWFwczogX2d1LkZpbGVbXSA9IFtdO1xuICAgIF9kZWNsYXJhdGlvbnM6IF9ndS5GaWxlW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfb3B0aW9uczogX3RzLkNvbXBpbGVyT3B0aW9ucywgcHVibGljIF9maWxlTmFtZXM6IHN0cmluZ1tdKSB7XG4gICAgICAgIGxldCBob3N0ID0gX3RzLmNyZWF0ZUNvbXBpbGVySG9zdChfb3B0aW9ucyk7XG4gICAgICAgIGxldCBwcm9ncmFtID0gX3RzLmNyZWF0ZVByb2dyYW0oX2ZpbGVOYW1lcywgX29wdGlvbnMsIGhvc3QpO1xuICAgICAgICBsZXQgZGlhZ25vc3RpY3MgPSBbXS5jb25jYXQoXG4gICAgICAgICAgICBwcm9ncmFtLmdldFN5bnRhY3RpY0RpYWdub3N0aWNzKCksXG4gICAgICAgICAgICBwcm9ncmFtLmdldE9wdGlvbnNEaWFnbm9zdGljcygpLFxuICAgICAgICAgICAgcHJvZ3JhbS5nZXRHbG9iYWxEaWFnbm9zdGljcygpLFxuICAgICAgICAgICAgcHJvZ3JhbS5nZXRTZW1hbnRpY0RpYWdub3N0aWNzKClcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGRpYWdub3N0aWNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlcG9ydERpYWdub3N0aWNzKGRpYWdub3N0aWNzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBwcm9ncmFtLmVtaXQodW5kZWZpbmVkLCB0aGlzLl93cml0ZS5iaW5kKHRoaXMpLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5kaWFnbm9zdGljcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmVwb3J0RGlhZ25vc3RpY3MocmVzdWx0LmRpYWdub3N0aWNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF9sYW5nLmZvckVhY2godGhpcy5fZmlsZXMsIChiYXNlLCBmaWxlR3JvdXApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZUdyb3VwLnNjcmlwdC5zb3VyY2VNYXAgPSBmaWxlR3JvdXAuc291cmNlTWFwO1xuICAgICAgICAgICAgICAgICAgICBmaWxlR3JvdXAuc2NyaXB0LmRlY2xhcmF0aW9uID0gZmlsZUdyb3VwLmRlY2xhcmF0aW9uO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfd3JpdGUoZmlsZU5hbWU6IHN0cmluZywgZGF0YTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGxldCBmaWxlID0gbmV3IF9ndS5GaWxlKHtcbiAgICAgICAgICAgIHBhdGg6IGZpbGVOYW1lLFxuICAgICAgICAgICAgYmFzZTogdGhpcy5fb3B0aW9ucy5yb290RGlyLFxuICAgICAgICAgICAgY29udGVudHM6IG5ldyBCdWZmZXIoZGF0YSlcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB7IGJhc2UsIGV4dCB9ID0gZmluZEV4dChmaWxlTmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgc3dpdGNoIChleHQpIHtcbiAgICAgICAgICAgIGNhc2UgJy5qcyc6XG4gICAgICAgICAgICBjYXNlICcuanN4JzpcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JpcHRzLnB1c2goZmlsZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmluZEZpbGVHcm91cChiYXNlKS5zY3JpcHQgPSBmaWxlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnLmpzLm1hcCc6XG4gICAgICAgICAgICBjYXNlICcuanN4Lm1hcCc6XG4gICAgICAgICAgICAgICAgdGhpcy5fc291cmNlTWFwcy5wdXNoKGZpbGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmRGaWxlR3JvdXAoYmFzZSkuc291cmNlTWFwID0gZmlsZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJy5kLnRzJzpcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWNsYXJhdGlvbnMucHVzaChmaWxlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5kRmlsZUdyb3VwKGJhc2UpLmRlY2xhcmF0aW9uID0gZmlsZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGZpbGUgdHlwZSAnJHtmaWxlTmFtZX0nYCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9maW5kRmlsZUdyb3VwKGJhc2U6IHN0cmluZyk6IEZpbGVHcm91cCB7XG4gICAgICAgIGxldCBmaWxlR3JvdXAgPSB0aGlzLl9maWxlc1tiYXNlXTtcbiAgICAgICAgaWYgKGZpbGVHcm91cCA9PSBudWxsKSB7XG4gICAgICAgICAgICBmaWxlR3JvdXAgPSB0aGlzLl9maWxlc1tiYXNlXSA9IHtcbiAgICAgICAgICAgICAgICBzY3JpcHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc291cmNlTWFwOiBudWxsLFxuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsZUdyb3VwO1xuICAgIH1cblxuICAgIGVtaXQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgX3V0aWwuUGFzc1Rocm91Z2hTdHJlYW0oXG4gICAgICAgICAgICBbXS5jb25jYXQodGhpcy5fc2NyaXB0cywgdGhpcy5fc291cmNlTWFwcywgdGhpcy5fZGVjbGFyYXRpb25zKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGVtaXRTY3JpcHRzKCkge1xuICAgICAgICByZXR1cm4gbmV3IF91dGlsLlBhc3NUaHJvdWdoU3RyZWFtKHRoaXMuX3NjcmlwdHMpO1xuICAgIH1cblxuICAgIGVtaXRTb3VyY2VNYXBzKCkge1xuICAgICAgICByZXR1cm4gbmV3IF91dGlsLlBhc3NUaHJvdWdoU3RyZWFtKHRoaXMuX3NvdXJjZU1hcHMpO1xuICAgIH1cblxuICAgIGVtaXREZWNsYXJhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgX3V0aWwuUGFzc1Rocm91Z2hTdHJlYW0odGhpcy5fZGVjbGFyYXRpb25zKTtcbiAgICB9XG5cbiAgICB3cml0ZUZpbGVzKCkge1xuICAgICAgICBsZXQgZmlsZXMgPSBbXS5jb25jYXQodGhpcy5fc2NyaXB0cywgdGhpcy5fc291cmNlTWFwcywgdGhpcy5fZGVjbGFyYXRpb25zKTtcbiAgICAgICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICAgICAgbWtkaXJwU3luYyhfcGF0aC5kaXJuYW1lKGZpbGUucGF0aCkpO1xuICAgICAgICAgICAgX2ZzLndyaXRlRmlsZVN5bmMoZmlsZS5wYXRoLCBmaWxlLmNvbnRlbnRzLCB7IGVuY29kaW5nOiAnVVRGLTgnIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbWtkaXJwU3luYyhwYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRzID0gX2ZzLmxzdGF0U3luYyhwYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChleCkgeyB9XG4gICAgICAgICAgICBpZiAoIXN0YXRzIHx8ICFzdGF0cy5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICAgICAgbWtkaXJwU3luYyhfcGF0aC5kaXJuYW1lKHBhdGgpKTtcbiAgICAgICAgICAgICAgICBfZnMubWtkaXJTeW5jKHBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwbHVnaW4oY29uZmlnOiBPYmplY3QsIGdsb2JzOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFBsdWdpbiB7XG4gICAgaWYgKCFfbGFuZy5pc09iamVjdChjb25maWcpKSB7XG4gICAgICAgIHRocm93IG5ldyBfdXRpbC5QbHVnaW5FcnJvcihgVGhlIGNvbmZpZyBhcmd1bWVudCBpcyBub3QgYW4gb2JqZWN0YCk7XG4gICAgfVxuXG4gICAgaWYgKCFfbGFuZy5pc1N0cmluZyhnbG9icykpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGdsb2JzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IF91dGlsLlBsdWdpbkVycm9yKGBUaGUgZ2xvYnMgYXJndW1lbnQgaXMgbm90IGEgc3RyaW5nIG9yIGFycmF5IG9mIHN0cmluZ3NgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2xvYnMgPSBbPHN0cmluZz5nbG9ic107XG4gICAgfVxuXG4gICAgbGV0IGZpbGVOYW1lcyA9IGZpbmRGaWxlcyg8c3RyaW5nW10+Z2xvYnMpO1xuXG4gICAgaWYgKCFmaWxlTmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBfdXRpbC5QbHVnaW5FcnJvcihgVGhlIG1hdGNoZWQgZmlsZSBzZXQgaXMgZW1wdHlgKTtcbiAgICB9XG5cbiAgICBsZXQgYWRhcHRlciA9IF9vcHRpb25zLmxvYWRBZGFwdGVyKGNvbmZpZyk7XG5cbiAgICBsZXQgbm90aWZpZXIgPSBuZXcgX3V0aWwuQWNjdW11bGF0aW5nTm90aWZpZXIoKTtcblxuICAgIGxldCBvcHRpb25zID0gX29wdGlvbnMucGFyc2VDb21waWxlck9wdGlvbnMoY29uZmlnLCByZXNvbHZlUGF0aCwgbm90aWZpZXIpO1xuXG4gICAgbm90aWZpZXIuZmlyZSgpO1xuXG4gICAgcmV0dXJuIG5ldyBQbHVnaW4ob3B0aW9ucywgZmlsZU5hbWVzKTtcbn1cblxuZnVuY3Rpb24gZmluZEZpbGVzKGdsb2JzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcbiAgICBsZXQgZmlsZU5hbWVzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGZvciAobGV0IGdsb2Igb2YgZ2xvYnMpIHtcbiAgICAgICAgZmlsZU5hbWVzID0gZmlsZU5hbWVzLmNvbmNhdChfZ2xvYi5zeW5jKGdsb2IsIHsgbm9kaXI6IHRydWUgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gZmlsZU5hbWVzLm1hcChyZXNvbHZlUGF0aCkuZmlsdGVyKHVuaXF1ZSk7XG5cbiAgICBmdW5jdGlvbiB1bmlxdWU8VD4odmFsdWU6IFQsIGluZGV4OiBudW1iZXIsIGFycmF5OiBUW10pIHtcbiAgICAgICAgcmV0dXJuIGFycmF5LmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVQYXRoKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIF9wYXRoLm5vcm1hbGl6ZShfcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksIHBhdGgpKTtcbn1cblxuZnVuY3Rpb24gZmluZEV4dChwYXRoOiBzdHJpbmcpOiB7IGJhc2U6IHN0cmluZzsgZXh0OiBzdHJpbmc7IH0ge1xuICAgIGxldCBzdWZmaXhlcyA9IFsnLmpzJywgJy5qc3gnLCAnLmpzLm1hcCcsICcuanN4Lm1hcCcsICcuZC50cyddO1xuICAgIGZvciAobGV0IHN1ZmZpeCBvZiBzdWZmaXhlcykge1xuICAgICAgICBpZiAocGF0aC5lbmRzV2l0aChzdWZmaXgpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJhc2U6IHBhdGguc3Vic3RyaW5nKDAsIHBhdGgubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aCksXG4gICAgICAgICAgICAgICAgZXh0OiBzdWZmaXhcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBiYXNlOiBwYXRoLFxuICAgICAgICBleHQ6IG51bGxcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlcG9ydERpYWdub3N0aWNzKGRpYWdub3N0aWNzOiBfdHMuRGlhZ25vc3RpY1tdKSB7XG4gICAgZm9yIChsZXQgZGlhZ25vc3RpYyBvZiBkaWFnbm9zdGljcykge1xuICAgICAgICByZXBvcnREaWFnbm9zdGljKGRpYWdub3N0aWMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVwb3J0RGlhZ25vc3RpYyhkaWFnbm9zdGljOiBfdHMuRGlhZ25vc3RpYykge1xuICAgIGxldCBvdXRwdXQgPSAnJztcblxuICAgIGlmIChkaWFnbm9zdGljLmZpbGUpIHtcbiAgICAgICAgbGV0IGxvYyA9IF90cy5nZXRMaW5lQW5kQ2hhcmFjdGVyT2ZQb3NpdGlvbihkaWFnbm9zdGljLmZpbGUsIGRpYWdub3N0aWMuc3RhcnQpO1xuICAgICAgICBvdXRwdXQgKz0gYCR7IGRpYWdub3N0aWMuZmlsZS5maWxlTmFtZSB9KCR7IGxvYy5saW5lICsgMSB9LCR7IGxvYy5jaGFyYWN0ZXIgKyAxIH0pOiBgO1xuICAgIH1cblxuICAgIGxldCBjYXRlZ29yeSA9IF90cy5EaWFnbm9zdGljQ2F0ZWdvcnlbZGlhZ25vc3RpYy5jYXRlZ29yeV0udG9Mb3dlckNhc2UoKTtcbiAgICBvdXRwdXQgKz0gYCR7IGNhdGVnb3J5IH0gVFMkeyBkaWFnbm9zdGljLmNvZGUgfTogJHsgZmxhdHRlbkRpYWdub3N0aWNNZXNzYWdlKGRpYWdub3N0aWMubWVzc2FnZVRleHQpIH1cXG5gO1xuXG4gICAgY29uc29sZS5lcnJvcihvdXRwdXQpO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuRGlhZ25vc3RpY01lc3NhZ2UobWVzc2FnZTogc3RyaW5nIHwgX3RzLkRpYWdub3N0aWNNZXNzYWdlQ2hhaW4pOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgZGlhZ25vc3RpYyA9IG1lc3NhZ2U7XG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcbiAgICAgICAgbGV0IGluZGVudCA9IDA7XG4gICAgICAgIHdoaWxlIChkaWFnbm9zdGljKSB7XG4gICAgICAgICAgICBpZiAoaW5kZW50KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdcXG4nO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRlbnQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyAgJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgKz0gZGlhZ25vc3RpYy5tZXNzYWdlVGV4dDtcbiAgICAgICAgICAgIGluZGVudCsrO1xuICAgICAgICAgICAgZGlhZ25vc3RpYyA9IGRpYWdub3N0aWMubmV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuZXhwb3J0ID0gcGx1Z2luO1xuIl19