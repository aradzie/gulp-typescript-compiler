var _ts = require('typescript');
var _adapter = require('./adapter');
var _lang = require('./lang');
var optionsList = [
    {
        name: 'charset',
        type: 'string',
    },
    {
        name: 'declaration',
        type: 'boolean',
    },
    {
        name: 'diagnostics',
        type: 'boolean',
    },
    {
        name: 'emitBOM',
        type: 'boolean'
    },
    {
        name: 'emitDecoratorMetadata',
        type: 'boolean',
        experimental: true,
    },
    {
        name: 'experimentalAsyncFunctions',
        type: 'boolean',
    },
    {
        name: 'experimentalDecorators',
        type: 'boolean',
    },
    {
        name: 'help',
        type: 'boolean',
    },
    {
        name: 'init',
        type: 'boolean',
    },
    {
        name: 'inlineSourceMap',
        type: 'boolean',
    },
    {
        name: 'inlineSources',
        type: 'boolean',
    },
    {
        name: 'isolatedModules',
        type: 'boolean',
    },
    {
        name: 'jsx',
        type: {
            'preserve': 1 /* Preserve */,
            'react': 2 /* React */,
        },
    },
    {
        name: 'listFiles',
        type: 'boolean',
    },
    {
        name: 'locale',
        type: 'string',
    },
    {
        name: 'mapRoot',
        type: 'string',
        isFilePath: true,
    },
    {
        name: 'module',
        type: {
            'commonjs': 1 /* CommonJS */,
            'amd': 2 /* AMD */,
            'system': 4 /* System */,
            'umd': 3 /* UMD */,
        },
    },
    {
        name: 'moduleResolution',
        type: {
            'node': 2 /* NodeJs */,
            'classic': 1 /* Classic */,
        },
    },
    {
        name: 'newLine',
        type: {
            'crlf': 0 /* CarriageReturnLineFeed */,
            'lf': 1 /* LineFeed */,
        },
    },
    {
        name: 'noEmit',
        type: 'boolean',
    },
    {
        name: 'noEmitHelpers',
        type: 'boolean',
    },
    {
        name: 'noEmitOnError',
        type: 'boolean',
    },
    {
        name: 'noImplicitAny',
        type: 'boolean',
    },
    {
        name: 'noLib',
        type: 'boolean',
    },
    {
        name: 'noResolve',
        type: 'boolean',
    },
    {
        name: 'outDir',
        type: 'string',
        isFilePath: true,
    },
    {
        name: 'outFile',
        type: 'string',
        isFilePath: true,
    },
    {
        name: 'preserveConstEnums',
        type: 'boolean',
    },
    {
        name: 'removeComments',
        type: 'boolean',
    },
    {
        name: 'rootDir',
        type: 'string',
        isFilePath: true,
    },
    {
        name: 'skipDefaultLibCheck',
        type: 'boolean',
    },
    {
        name: 'sourceMap',
        type: 'boolean',
    },
    {
        name: 'sourceRoot',
        type: 'string',
        isFilePath: true,
    },
    {
        name: 'suppressExcessPropertyErrors',
        type: 'boolean',
        experimental: true
    },
    {
        name: 'suppressImplicitAnyIndexErrors',
        type: 'boolean',
    },
    {
        name: 'stripInternal',
        type: 'boolean',
        experimental: true
    },
    {
        name: 'target',
        type: {
            'es3': 0 /* ES3 */,
            'es5': 1 /* ES5 */,
            'es6': 2 /* ES6 */,
        },
    },
];
var optionsMap = _lang.groupBy(optionsList, 'name');
var S_TYPESCRIPT = 'typescript';
function parseCompilerOptions(config, resolvePath, notifier) {
    var options = Object.create(null);
    _lang.forEach(config, function (name, value) {
        if (name in optionsMap) {
            var option = optionsMap[name];
            if (option.type === 'string') {
                if (!_lang.isString(value)) {
                    notifier.notify("Expected string value of the config property " + q(name));
                }
            }
            else if (option.type === 'number') {
                if (!_lang.isNumber(value)) {
                    notifier.notify("Expected number value of the config property " + q(name));
                }
            }
            else if (option.type === 'boolean') {
                if (!_lang.isBoolean(value)) {
                    notifier.notify("Expected boolean value of the config property " + q(name));
                }
            }
            else {
                if (value in option.type) {
                    value = option.type[value];
                }
                else {
                    notifier.notify(("Unknown value " + q(value) + " of the config property " + q(name) + ", ") +
                        ("expected one of " + Object.keys(option.type).map(q).join(', ')));
                }
            }
            if (option.isFilePath) {
                value = resolvePath(value);
            }
            options[name] = value;
        }
        else {
            if (name !== S_TYPESCRIPT) {
                notifier.notify("Unknown config property " + q(name));
            }
        }
    });
    if (options.rootDir == null) {
        options.rootDir = resolvePath('.');
    }
    return options;
    function q(s) {
        return "'" + s + "'";
    }
}
exports.parseCompilerOptions = parseCompilerOptions;
function loadAdapter(config) {
    if (S_TYPESCRIPT in config) {
        var ts = config[S_TYPESCRIPT];
        if (!_lang.isObject(ts) || !_lang.isString(ts.version)) {
            throw new Error("Invalid TypeScript opbect in the config property 'typescript'");
        }
        return _adapter.load(ts);
    }
    else {
        return _adapter.load(_ts);
    }
}
exports.loadAdapter = loadAdapter;
//# sourceMappingURL=data:application/json;base64,