!function e(o,t,r){function n(u,i){if(!t[u]){if(!o[u]){var c="function"==typeof require&&require;if(!i&&c)return c(u,!0);if(l)return l(u,!0);var a=new Error("Cannot find module '"+u+"'");throw a.code="MODULE_NOT_FOUND",a}var f=t[u]={exports:{}};o[u][0].call(f.exports,function(e){var t=o[u][1][e];return n(t||e)},f,f.exports,e,o,t,r)}return t[u].exports}for(var l="function"==typeof require&&require,u=0;u<r.length;u++)n(r[u]);return n}({1:[function(e,o,t){"use strict";function r(e){console.log("external module1 called from "+e)}Object.defineProperty(t,"__esModule",{value:!0}),t.test=r,console.log("external module1 loaded")},{}],2:[function(e,o,t){"use strict";function r(e){console.log("external module2 called from "+e)}Object.defineProperty(t,"__esModule",{value:!0}),t.test=r,console.log("external module2 loaded")},{}],3:[function(e,o,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=e("./external1"),n=e("./external2"),l="main";console.log(l+" loaded"),function(){r.test(l),n.test(l)}()},{"./external1":1,"./external2":2}]},{},[3]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1bmRsZS5qcyJdLCJuYW1lcyI6WyJlIiwidCIsIm4iLCJyIiwicyIsIm8iLCJ1IiwiYSIsInJlcXVpcmUiLCJpIiwiZiIsIkVycm9yIiwiY29kZSIsImwiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJtb2R1bGUiLCJ0ZXN0IiwiaWQiLCJjb25zb2xlIiwibG9nIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIjIiLCIzIiwiRTEiLCJFMiIsIi4vZXh0ZXJuYWwxIiwiLi9leHRlcm5hbDIiXSwibWFwcGluZ3MiOiJDQUFBLFFBQUFBLEdBQUFDLEVBQUFDLEVBQUFDLEdBQUEsUUFBQUMsR0FBQUMsRUFBQUMsR0FBQSxJQUFBSixFQUFBRyxHQUFBLENBQUEsSUFBQUosRUFBQUksR0FBQSxDQUFBLEdBQUFFLEdBQUEsa0JBQUFDLFVBQUFBLE9BQUEsS0FBQUYsR0FBQUMsRUFBQSxNQUFBQSxHQUFBRixHQUFBLEVBQUEsSUFBQUksRUFBQSxNQUFBQSxHQUFBSixHQUFBLEVBQUEsSUFBQUssR0FBQSxHQUFBQyxPQUFBLHVCQUFBTixFQUFBLElBQUEsTUFBQUssR0FBQUUsS0FBQSxtQkFBQUYsRUFBQSxHQUFBRyxHQUFBWCxFQUFBRyxJQUFBUyxXQUFBYixHQUFBSSxHQUFBLEdBQUFVLEtBQUFGLEVBQUFDLFFBQUEsU0FBQWQsR0FBQSxHQUFBRSxHQUFBRCxFQUFBSSxHQUFBLEdBQUFMLEVBQUEsT0FBQUksR0FBQUYsR0FBQUYsSUFBQWEsRUFBQUEsRUFBQUMsUUFBQWQsRUFBQUMsRUFBQUMsRUFBQUMsR0FBQSxNQUFBRCxHQUFBRyxHQUFBUyxRQUFBLElBQUEsR0FBQUwsR0FBQSxrQkFBQUQsVUFBQUEsUUFBQUgsRUFBQSxFQUFBQSxFQUFBRixFQUFBYSxPQUFBWCxJQUFBRCxFQUFBRCxFQUFBRSxHQUFBLE9BQUFELEtBQUFhLEdBQUEsU0FBQVQsRUFBQVUsRUFBQUosR0FDQSxZQUVBLFNBQUFLLEdBQUFDLEdBQ0FDLFFBQUFDLElBQUEsZ0NBQUFGLEdBRkFHLE9BQUFDLGVBQUFWLEVBQUEsY0FBQVcsT0FBQSxJQUlBWCxFQUFBSyxLQUFBQSxFQUNBRSxRQUFBQyxJQUFBLGdDQUVBSSxHQUFBLFNBQUFsQixFQUFBVSxFQUFBSixHQUNBLFlBRUEsU0FBQUssR0FBQUMsR0FDQUMsUUFBQUMsSUFBQSxnQ0FBQUYsR0FGQUcsT0FBQUMsZUFBQVYsRUFBQSxjQUFBVyxPQUFBLElBSUFYLEVBQUFLLEtBQUFBLEVBQ0FFLFFBQUFDLElBQUEsZ0NBRUFLLEdBQUEsU0FBQW5CLEVBQUFVLEVBQUFKLEdBQ0EsWUFDQVMsUUFBQUMsZUFBQVYsRUFBQSxjQUFBVyxPQUFBLEdBQ0EsSUFBQUcsR0FBQXBCLEVBQUEsZUFDQXFCLEVBQUFyQixFQUFBLGVBQ0FZLEVBQUEsTUFLQUMsU0FBQUMsSUFBQUYsRUFBQSxXQUpBLFdBQ0FRLEVBQUFULEtBQUFDLEdBQ0FTLEVBQUFWLEtBQUFDLFFBS0FVLGNBQUEsRUFBQUMsY0FBQSxTQUFBIiwiZmlsZSI6ImFsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gdGVzdChpZCkge1xuICAgIGNvbnNvbGUubG9nKFwiZXh0ZXJuYWwgbW9kdWxlMSBjYWxsZWQgZnJvbSBcIiArIGlkKTtcbn1cbmV4cG9ydHMudGVzdCA9IHRlc3Q7XG5jb25zb2xlLmxvZygnZXh0ZXJuYWwgbW9kdWxlMSBsb2FkZWQnKTtcblxufSx7fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIHRlc3QoaWQpIHtcbiAgICBjb25zb2xlLmxvZyhcImV4dGVybmFsIG1vZHVsZTIgY2FsbGVkIGZyb20gXCIgKyBpZCk7XG59XG5leHBvcnRzLnRlc3QgPSB0ZXN0O1xuY29uc29sZS5sb2coJ2V4dGVybmFsIG1vZHVsZTIgbG9hZGVkJyk7XG5cbn0se31dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRTEgPSByZXF1aXJlKFwiLi9leHRlcm5hbDFcIik7XG52YXIgRTIgPSByZXF1aXJlKFwiLi9leHRlcm5hbDJcIik7XG52YXIgaWQgPSAnbWFpbic7XG5mdW5jdGlvbiBtYWluKCkge1xuICAgIEUxLnRlc3QoaWQpO1xuICAgIEUyLnRlc3QoaWQpO1xufVxuY29uc29sZS5sb2coaWQgKyBcIiBsb2FkZWRcIik7XG5tYWluKCk7XG5cbn0se1wiLi9leHRlcm5hbDFcIjoxLFwiLi9leHRlcm5hbDJcIjoyfV19LHt9LFszXSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSXVMaTl6Y21NdlpYaDBaWEp1WVd3eExuUnpJaXdpTGk0dmMzSmpMMlY0ZEdWeWJtRnNNaTUwY3lJc0lpNHVMM055WXk5dFlXbHVMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk96czdRVU5CUVN4alFVRnhRaXhGUVVGVk8wbEJRek5DTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc2EwTkJRV2RETEVWQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTNSRUxFTkJRVU03UVVGR1JDeHZRa0ZGUXp0QlFVVkVMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zZVVKQlFYbENMRU5CUVVNc1EwRkJRenM3T3pzN1FVTktka01zWTBGQmNVSXNSVUZCVlR0SlFVTXpRaXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEd0RFFVRm5ReXhGUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU4wUkN4RFFVRkRPMEZCUmtRc2IwSkJSVU03UVVGRlJDeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMSGxDUVVGNVFpeERRVUZETEVOQlFVTTdPenM3TzBGRFNuWkRMR2REUVVGclF6dEJRVU5zUXl4blEwRkJhME03UVVGRmJFTXNTVUZCVFN4RlFVRkZMRWRCUVVjc1RVRkJUU3hEUVVGRE8wRkJSV3hDTzBsQlEwa3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEpRVU5hTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGFFSXNRMEZCUXp0QlFVVkVMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVWtzUlVGQlJTeFpRVUZUTEVOQlFVTXNRMEZCUXp0QlFVVTFRaXhKUVVGSkxFVkJRVVVzUTBGQlF5SXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpS0daMWJtTjBhVzl1SUdVb2RDeHVMSElwZTJaMWJtTjBhVzl1SUhNb2J5eDFLWHRwWmlnaGJsdHZYU2w3YVdZb0lYUmJiMTBwZTNaaGNpQmhQWFI1Y0dWdlppQnlaWEYxYVhKbFBUMWNJbVoxYm1OMGFXOXVYQ0ltSm5KbGNYVnBjbVU3YVdZb0lYVW1KbUVwY21WMGRYSnVJR0VvYnl3aE1DazdhV1lvYVNseVpYUjFjbTRnYVNodkxDRXdLVHQyWVhJZ1pqMXVaWGNnUlhKeWIzSW9YQ0pEWVc1dWIzUWdabWx1WkNCdGIyUjFiR1VnSjF3aUsyOHJYQ0luWENJcE8zUm9jbTkzSUdZdVkyOWtaVDFjSWsxUFJGVk1SVjlPVDFSZlJrOVZUa1JjSWl4bWZYWmhjaUJzUFc1YmIxMDllMlY0Y0c5eWRITTZlMzE5TzNSYmIxMWJNRjB1WTJGc2JDaHNMbVY0Y0c5eWRITXNablZ1WTNScGIyNG9aU2w3ZG1GeUlHNDlkRnR2WFZzeFhWdGxYVHR5WlhSMWNtNGdjeWh1UDI0NlpTbDlMR3dzYkM1bGVIQnZjblJ6TEdVc2RDeHVMSElwZlhKbGRIVnliaUJ1VzI5ZExtVjRjRzl5ZEhOOWRtRnlJR2s5ZEhsd1pXOW1JSEpsY1hWcGNtVTlQVndpWm5WdVkzUnBiMjVjSWlZbWNtVnhkV2x5WlR0bWIzSW9kbUZ5SUc4OU1EdHZQSEl1YkdWdVozUm9PMjhyS3lsektISmJiMTBwTzNKbGRIVnliaUJ6ZlNraUxDSmxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2RHVnpkQ2hwWkRvZ2MzUnlhVzVuS1NCN1hHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb1lHVjRkR1Z5Ym1Gc0lHMXZaSFZzWlRFZ1kyRnNiR1ZrSUdaeWIyMGdKSHRwWkgxZ0tUdGNibjFjYmx4dVkyOXVjMjlzWlM1c2IyY29KMlY0ZEdWeWJtRnNJRzF2WkhWc1pURWdiRzloWkdWa0p5azdYRzRpTENKbGVIQnZjblFnWm5WdVkzUnBiMjRnZEdWemRDaHBaRG9nYzNSeWFXNW5LU0I3WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvWUdWNGRHVnlibUZzSUcxdlpIVnNaVElnWTJGc2JHVmtJR1p5YjIwZ0pIdHBaSDFnS1R0Y2JuMWNibHh1WTI5dWMyOXNaUzVzYjJjb0oyVjRkR1Z5Ym1Gc0lHMXZaSFZzWlRJZ2JHOWhaR1ZrSnlrN1hHNGlMQ0pwYlhCdmNuUWdLaUJoY3lCRk1TQm1jbTl0SUNjdUwyVjRkR1Z5Ym1Gc01TYzdYRzVwYlhCdmNuUWdLaUJoY3lCRk1pQm1jbTl0SUNjdUwyVjRkR1Z5Ym1Gc01pYzdYRzVjYm1OdmJuTjBJR2xrSUQwZ0oyMWhhVzRuTzF4dVhHNW1kVzVqZEdsdmJpQnRZV2x1S0NrZ2UxeHVJQ0FnSUVVeExuUmxjM1FvYVdRcE8xeHVJQ0FnSUVVeUxuUmxjM1FvYVdRcE8xeHVmVnh1WEc1amIyNXpiMnhsTG14dlp5aGdKSHRwWkgwZ2JHOWhaR1ZrWUNrN1hHNWNibTFoYVc0b0tUdGNiaUpkZlE9PVxuIl19
